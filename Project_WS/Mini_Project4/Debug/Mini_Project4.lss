
Mini_Project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001eb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00001eb4  00001f48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800076  00800076  00001f5e  2**0
                  ALLOC
  3 .stab         00001890  00000000  00000000  00001f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e28  00000000  00000000  000037f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00004778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00004907  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000694c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00007a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000089d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00008b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00008e12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000096a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	43 c0       	rjmp	.+134    	; 0x8c <__bad_interrupt>
       6:	00 00       	nop
       8:	41 c0       	rjmp	.+130    	; 0x8c <__bad_interrupt>
       a:	00 00       	nop
       c:	3f c0       	rjmp	.+126    	; 0x8c <__bad_interrupt>
       e:	00 00       	nop
      10:	3d c0       	rjmp	.+122    	; 0x8c <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__vector_5>
      18:	39 c0       	rjmp	.+114    	; 0x8c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	37 c0       	rjmp	.+110    	; 0x8c <__bad_interrupt>
      1e:	00 00       	nop
      20:	35 c0       	rjmp	.+106    	; 0x8c <__bad_interrupt>
      22:	00 00       	nop
      24:	33 c0       	rjmp	.+102    	; 0x8c <__bad_interrupt>
      26:	00 00       	nop
      28:	31 c0       	rjmp	.+98     	; 0x8c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2f c0       	rjmp	.+94     	; 0x8c <__bad_interrupt>
      2e:	00 00       	nop
      30:	2d c0       	rjmp	.+90     	; 0x8c <__bad_interrupt>
      32:	00 00       	nop
      34:	2b c0       	rjmp	.+86     	; 0x8c <__bad_interrupt>
      36:	00 00       	nop
      38:	29 c0       	rjmp	.+82     	; 0x8c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	27 c0       	rjmp	.+78     	; 0x8c <__bad_interrupt>
      3e:	00 00       	nop
      40:	25 c0       	rjmp	.+74     	; 0x8c <__bad_interrupt>
      42:	00 00       	nop
      44:	23 c0       	rjmp	.+70     	; 0x8c <__bad_interrupt>
      46:	00 00       	nop
      48:	21 c0       	rjmp	.+66     	; 0x8c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1f c0       	rjmp	.+62     	; 0x8c <__bad_interrupt>
      4e:	00 00       	nop
      50:	1d c0       	rjmp	.+58     	; 0x8c <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	ed d5       	rcall	.+3034   	; 0xc62 <main>
      88:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <_exit>

0000008c <__bad_interrupt>:
      8c:	b9 cf       	rjmp	.-142    	; 0x0 <__vectors>

0000008e <__fixunssfsi>:
      8e:	ef 92       	push	r14
      90:	ff 92       	push	r15
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	7b 01       	movw	r14, r22
      98:	8c 01       	movw	r16, r24
      9a:	20 e0       	ldi	r18, 0x00	; 0
      9c:	30 e0       	ldi	r19, 0x00	; 0
      9e:	40 e0       	ldi	r20, 0x00	; 0
      a0:	5f e4       	ldi	r21, 0x4F	; 79
      a2:	8c d3       	rcall	.+1816   	; 0x7bc <__gesf2>
      a4:	88 23       	and	r24, r24
      a6:	7c f0       	brlt	.+30     	; 0xc6 <__fixunssfsi+0x38>
      a8:	c8 01       	movw	r24, r16
      aa:	b7 01       	movw	r22, r14
      ac:	20 e0       	ldi	r18, 0x00	; 0
      ae:	30 e0       	ldi	r19, 0x00	; 0
      b0:	40 e0       	ldi	r20, 0x00	; 0
      b2:	5f e4       	ldi	r21, 0x4F	; 79
      b4:	60 d1       	rcall	.+704    	; 0x376 <__subsf3>
      b6:	dc d3       	rcall	.+1976   	; 0x870 <__fixsfsi>
      b8:	9b 01       	movw	r18, r22
      ba:	ac 01       	movw	r20, r24
      bc:	20 50       	subi	r18, 0x00	; 0
      be:	30 40       	sbci	r19, 0x00	; 0
      c0:	40 40       	sbci	r20, 0x00	; 0
      c2:	50 48       	sbci	r21, 0x80	; 128
      c4:	05 c0       	rjmp	.+10     	; 0xd0 <__fixunssfsi+0x42>
      c6:	c8 01       	movw	r24, r16
      c8:	b7 01       	movw	r22, r14
      ca:	d2 d3       	rcall	.+1956   	; 0x870 <__fixsfsi>
      cc:	9b 01       	movw	r18, r22
      ce:	ac 01       	movw	r20, r24
      d0:	b9 01       	movw	r22, r18
      d2:	ca 01       	movw	r24, r20
      d4:	1f 91       	pop	r17
      d6:	0f 91       	pop	r16
      d8:	ff 90       	pop	r15
      da:	ef 90       	pop	r14
      dc:	08 95       	ret

000000de <_fpadd_parts>:
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b0 e0       	ldi	r27, 0x00	; 0
      e2:	e5 e7       	ldi	r30, 0x75	; 117
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	0c 94 f2 0e 	jmp	0x1de4	; 0x1de4 <__prologue_saves__>
      ea:	dc 01       	movw	r26, r24
      ec:	2b 01       	movw	r4, r22
      ee:	fa 01       	movw	r30, r20
      f0:	9c 91       	ld	r25, X
      f2:	92 30       	cpi	r25, 0x02	; 2
      f4:	08 f4       	brcc	.+2      	; 0xf8 <_fpadd_parts+0x1a>
      f6:	39 c1       	rjmp	.+626    	; 0x36a <_fpadd_parts+0x28c>
      f8:	eb 01       	movw	r28, r22
      fa:	88 81       	ld	r24, Y
      fc:	82 30       	cpi	r24, 0x02	; 2
      fe:	08 f4       	brcc	.+2      	; 0x102 <_fpadd_parts+0x24>
     100:	33 c1       	rjmp	.+614    	; 0x368 <_fpadd_parts+0x28a>
     102:	94 30       	cpi	r25, 0x04	; 4
     104:	69 f4       	brne	.+26     	; 0x120 <_fpadd_parts+0x42>
     106:	84 30       	cpi	r24, 0x04	; 4
     108:	09 f0       	breq	.+2      	; 0x10c <_fpadd_parts+0x2e>
     10a:	2f c1       	rjmp	.+606    	; 0x36a <_fpadd_parts+0x28c>
     10c:	11 96       	adiw	r26, 0x01	; 1
     10e:	9c 91       	ld	r25, X
     110:	11 97       	sbiw	r26, 0x01	; 1
     112:	89 81       	ldd	r24, Y+1	; 0x01
     114:	98 17       	cp	r25, r24
     116:	09 f4       	brne	.+2      	; 0x11a <_fpadd_parts+0x3c>
     118:	28 c1       	rjmp	.+592    	; 0x36a <_fpadd_parts+0x28c>
     11a:	ae e6       	ldi	r26, 0x6E	; 110
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	25 c1       	rjmp	.+586    	; 0x36a <_fpadd_parts+0x28c>
     120:	84 30       	cpi	r24, 0x04	; 4
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x48>
     124:	21 c1       	rjmp	.+578    	; 0x368 <_fpadd_parts+0x28a>
     126:	82 30       	cpi	r24, 0x02	; 2
     128:	a9 f4       	brne	.+42     	; 0x154 <_fpadd_parts+0x76>
     12a:	92 30       	cpi	r25, 0x02	; 2
     12c:	09 f0       	breq	.+2      	; 0x130 <_fpadd_parts+0x52>
     12e:	1d c1       	rjmp	.+570    	; 0x36a <_fpadd_parts+0x28c>
     130:	9a 01       	movw	r18, r20
     132:	ad 01       	movw	r20, r26
     134:	88 e0       	ldi	r24, 0x08	; 8
     136:	ea 01       	movw	r28, r20
     138:	09 90       	ld	r0, Y+
     13a:	ae 01       	movw	r20, r28
     13c:	e9 01       	movw	r28, r18
     13e:	09 92       	st	Y+, r0
     140:	9e 01       	movw	r18, r28
     142:	81 50       	subi	r24, 0x01	; 1
     144:	c1 f7       	brne	.-16     	; 0x136 <_fpadd_parts+0x58>
     146:	e2 01       	movw	r28, r4
     148:	89 81       	ldd	r24, Y+1	; 0x01
     14a:	11 96       	adiw	r26, 0x01	; 1
     14c:	9c 91       	ld	r25, X
     14e:	89 23       	and	r24, r25
     150:	81 83       	std	Z+1, r24	; 0x01
     152:	08 c1       	rjmp	.+528    	; 0x364 <_fpadd_parts+0x286>
     154:	92 30       	cpi	r25, 0x02	; 2
     156:	09 f4       	brne	.+2      	; 0x15a <_fpadd_parts+0x7c>
     158:	07 c1       	rjmp	.+526    	; 0x368 <_fpadd_parts+0x28a>
     15a:	12 96       	adiw	r26, 0x02	; 2
     15c:	2d 90       	ld	r2, X+
     15e:	3c 90       	ld	r3, X
     160:	13 97       	sbiw	r26, 0x03	; 3
     162:	eb 01       	movw	r28, r22
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	9b 81       	ldd	r25, Y+3	; 0x03
     168:	14 96       	adiw	r26, 0x04	; 4
     16a:	ad 90       	ld	r10, X+
     16c:	bd 90       	ld	r11, X+
     16e:	cd 90       	ld	r12, X+
     170:	dc 90       	ld	r13, X
     172:	17 97       	sbiw	r26, 0x07	; 7
     174:	ec 80       	ldd	r14, Y+4	; 0x04
     176:	fd 80       	ldd	r15, Y+5	; 0x05
     178:	0e 81       	ldd	r16, Y+6	; 0x06
     17a:	1f 81       	ldd	r17, Y+7	; 0x07
     17c:	91 01       	movw	r18, r2
     17e:	28 1b       	sub	r18, r24
     180:	39 0b       	sbc	r19, r25
     182:	b9 01       	movw	r22, r18
     184:	37 ff       	sbrs	r19, 7
     186:	04 c0       	rjmp	.+8      	; 0x190 <_fpadd_parts+0xb2>
     188:	66 27       	eor	r22, r22
     18a:	77 27       	eor	r23, r23
     18c:	62 1b       	sub	r22, r18
     18e:	73 0b       	sbc	r23, r19
     190:	60 32       	cpi	r22, 0x20	; 32
     192:	71 05       	cpc	r23, r1
     194:	0c f0       	brlt	.+2      	; 0x198 <_fpadd_parts+0xba>
     196:	61 c0       	rjmp	.+194    	; 0x25a <_fpadd_parts+0x17c>
     198:	12 16       	cp	r1, r18
     19a:	13 06       	cpc	r1, r19
     19c:	6c f5       	brge	.+90     	; 0x1f8 <_fpadd_parts+0x11a>
     19e:	37 01       	movw	r6, r14
     1a0:	48 01       	movw	r8, r16
     1a2:	06 2e       	mov	r0, r22
     1a4:	04 c0       	rjmp	.+8      	; 0x1ae <_fpadd_parts+0xd0>
     1a6:	96 94       	lsr	r9
     1a8:	87 94       	ror	r8
     1aa:	77 94       	ror	r7
     1ac:	67 94       	ror	r6
     1ae:	0a 94       	dec	r0
     1b0:	d2 f7       	brpl	.-12     	; 0x1a6 <_fpadd_parts+0xc8>
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	40 e0       	ldi	r20, 0x00	; 0
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <_fpadd_parts+0xe6>
     1bc:	22 0f       	add	r18, r18
     1be:	33 1f       	adc	r19, r19
     1c0:	44 1f       	adc	r20, r20
     1c2:	55 1f       	adc	r21, r21
     1c4:	6a 95       	dec	r22
     1c6:	d2 f7       	brpl	.-12     	; 0x1bc <_fpadd_parts+0xde>
     1c8:	21 50       	subi	r18, 0x01	; 1
     1ca:	30 40       	sbci	r19, 0x00	; 0
     1cc:	40 40       	sbci	r20, 0x00	; 0
     1ce:	50 40       	sbci	r21, 0x00	; 0
     1d0:	2e 21       	and	r18, r14
     1d2:	3f 21       	and	r19, r15
     1d4:	40 23       	and	r20, r16
     1d6:	51 23       	and	r21, r17
     1d8:	21 15       	cp	r18, r1
     1da:	31 05       	cpc	r19, r1
     1dc:	41 05       	cpc	r20, r1
     1de:	51 05       	cpc	r21, r1
     1e0:	21 f0       	breq	.+8      	; 0x1ea <_fpadd_parts+0x10c>
     1e2:	21 e0       	ldi	r18, 0x01	; 1
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	79 01       	movw	r14, r18
     1ec:	8a 01       	movw	r16, r20
     1ee:	e6 28       	or	r14, r6
     1f0:	f7 28       	or	r15, r7
     1f2:	08 29       	or	r16, r8
     1f4:	19 29       	or	r17, r9
     1f6:	3c c0       	rjmp	.+120    	; 0x270 <_fpadd_parts+0x192>
     1f8:	23 2b       	or	r18, r19
     1fa:	d1 f1       	breq	.+116    	; 0x270 <_fpadd_parts+0x192>
     1fc:	26 0e       	add	r2, r22
     1fe:	37 1e       	adc	r3, r23
     200:	35 01       	movw	r6, r10
     202:	46 01       	movw	r8, r12
     204:	06 2e       	mov	r0, r22
     206:	04 c0       	rjmp	.+8      	; 0x210 <_fpadd_parts+0x132>
     208:	96 94       	lsr	r9
     20a:	87 94       	ror	r8
     20c:	77 94       	ror	r7
     20e:	67 94       	ror	r6
     210:	0a 94       	dec	r0
     212:	d2 f7       	brpl	.-12     	; 0x208 <_fpadd_parts+0x12a>
     214:	21 e0       	ldi	r18, 0x01	; 1
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	50 e0       	ldi	r21, 0x00	; 0
     21c:	04 c0       	rjmp	.+8      	; 0x226 <_fpadd_parts+0x148>
     21e:	22 0f       	add	r18, r18
     220:	33 1f       	adc	r19, r19
     222:	44 1f       	adc	r20, r20
     224:	55 1f       	adc	r21, r21
     226:	6a 95       	dec	r22
     228:	d2 f7       	brpl	.-12     	; 0x21e <_fpadd_parts+0x140>
     22a:	21 50       	subi	r18, 0x01	; 1
     22c:	30 40       	sbci	r19, 0x00	; 0
     22e:	40 40       	sbci	r20, 0x00	; 0
     230:	50 40       	sbci	r21, 0x00	; 0
     232:	2a 21       	and	r18, r10
     234:	3b 21       	and	r19, r11
     236:	4c 21       	and	r20, r12
     238:	5d 21       	and	r21, r13
     23a:	21 15       	cp	r18, r1
     23c:	31 05       	cpc	r19, r1
     23e:	41 05       	cpc	r20, r1
     240:	51 05       	cpc	r21, r1
     242:	21 f0       	breq	.+8      	; 0x24c <_fpadd_parts+0x16e>
     244:	21 e0       	ldi	r18, 0x01	; 1
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	59 01       	movw	r10, r18
     24e:	6a 01       	movw	r12, r20
     250:	a6 28       	or	r10, r6
     252:	b7 28       	or	r11, r7
     254:	c8 28       	or	r12, r8
     256:	d9 28       	or	r13, r9
     258:	0b c0       	rjmp	.+22     	; 0x270 <_fpadd_parts+0x192>
     25a:	82 15       	cp	r24, r2
     25c:	93 05       	cpc	r25, r3
     25e:	2c f0       	brlt	.+10     	; 0x26a <_fpadd_parts+0x18c>
     260:	1c 01       	movw	r2, r24
     262:	aa 24       	eor	r10, r10
     264:	bb 24       	eor	r11, r11
     266:	65 01       	movw	r12, r10
     268:	03 c0       	rjmp	.+6      	; 0x270 <_fpadd_parts+0x192>
     26a:	ee 24       	eor	r14, r14
     26c:	ff 24       	eor	r15, r15
     26e:	87 01       	movw	r16, r14
     270:	11 96       	adiw	r26, 0x01	; 1
     272:	9c 91       	ld	r25, X
     274:	d2 01       	movw	r26, r4
     276:	11 96       	adiw	r26, 0x01	; 1
     278:	8c 91       	ld	r24, X
     27a:	98 17       	cp	r25, r24
     27c:	09 f4       	brne	.+2      	; 0x280 <_fpadd_parts+0x1a2>
     27e:	45 c0       	rjmp	.+138    	; 0x30a <_fpadd_parts+0x22c>
     280:	99 23       	and	r25, r25
     282:	39 f0       	breq	.+14     	; 0x292 <_fpadd_parts+0x1b4>
     284:	a8 01       	movw	r20, r16
     286:	97 01       	movw	r18, r14
     288:	2a 19       	sub	r18, r10
     28a:	3b 09       	sbc	r19, r11
     28c:	4c 09       	sbc	r20, r12
     28e:	5d 09       	sbc	r21, r13
     290:	06 c0       	rjmp	.+12     	; 0x29e <_fpadd_parts+0x1c0>
     292:	a6 01       	movw	r20, r12
     294:	95 01       	movw	r18, r10
     296:	2e 19       	sub	r18, r14
     298:	3f 09       	sbc	r19, r15
     29a:	40 0b       	sbc	r20, r16
     29c:	51 0b       	sbc	r21, r17
     29e:	57 fd       	sbrc	r21, 7
     2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <_fpadd_parts+0x1d4>
     2a2:	11 82       	std	Z+1, r1	; 0x01
     2a4:	33 82       	std	Z+3, r3	; 0x03
     2a6:	22 82       	std	Z+2, r2	; 0x02
     2a8:	24 83       	std	Z+4, r18	; 0x04
     2aa:	35 83       	std	Z+5, r19	; 0x05
     2ac:	46 83       	std	Z+6, r20	; 0x06
     2ae:	57 83       	std	Z+7, r21	; 0x07
     2b0:	1d c0       	rjmp	.+58     	; 0x2ec <_fpadd_parts+0x20e>
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	81 83       	std	Z+1, r24	; 0x01
     2b6:	33 82       	std	Z+3, r3	; 0x03
     2b8:	22 82       	std	Z+2, r2	; 0x02
     2ba:	88 27       	eor	r24, r24
     2bc:	99 27       	eor	r25, r25
     2be:	dc 01       	movw	r26, r24
     2c0:	82 1b       	sub	r24, r18
     2c2:	93 0b       	sbc	r25, r19
     2c4:	a4 0b       	sbc	r26, r20
     2c6:	b5 0b       	sbc	r27, r21
     2c8:	84 83       	std	Z+4, r24	; 0x04
     2ca:	95 83       	std	Z+5, r25	; 0x05
     2cc:	a6 83       	std	Z+6, r26	; 0x06
     2ce:	b7 83       	std	Z+7, r27	; 0x07
     2d0:	0d c0       	rjmp	.+26     	; 0x2ec <_fpadd_parts+0x20e>
     2d2:	22 0f       	add	r18, r18
     2d4:	33 1f       	adc	r19, r19
     2d6:	44 1f       	adc	r20, r20
     2d8:	55 1f       	adc	r21, r21
     2da:	24 83       	std	Z+4, r18	; 0x04
     2dc:	35 83       	std	Z+5, r19	; 0x05
     2de:	46 83       	std	Z+6, r20	; 0x06
     2e0:	57 83       	std	Z+7, r21	; 0x07
     2e2:	82 81       	ldd	r24, Z+2	; 0x02
     2e4:	93 81       	ldd	r25, Z+3	; 0x03
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	93 83       	std	Z+3, r25	; 0x03
     2ea:	82 83       	std	Z+2, r24	; 0x02
     2ec:	24 81       	ldd	r18, Z+4	; 0x04
     2ee:	35 81       	ldd	r19, Z+5	; 0x05
     2f0:	46 81       	ldd	r20, Z+6	; 0x06
     2f2:	57 81       	ldd	r21, Z+7	; 0x07
     2f4:	da 01       	movw	r26, r20
     2f6:	c9 01       	movw	r24, r18
     2f8:	01 97       	sbiw	r24, 0x01	; 1
     2fa:	a1 09       	sbc	r26, r1
     2fc:	b1 09       	sbc	r27, r1
     2fe:	8f 5f       	subi	r24, 0xFF	; 255
     300:	9f 4f       	sbci	r25, 0xFF	; 255
     302:	af 4f       	sbci	r26, 0xFF	; 255
     304:	bf 43       	sbci	r27, 0x3F	; 63
     306:	28 f3       	brcs	.-54     	; 0x2d2 <_fpadd_parts+0x1f4>
     308:	0b c0       	rjmp	.+22     	; 0x320 <_fpadd_parts+0x242>
     30a:	91 83       	std	Z+1, r25	; 0x01
     30c:	33 82       	std	Z+3, r3	; 0x03
     30e:	22 82       	std	Z+2, r2	; 0x02
     310:	ea 0c       	add	r14, r10
     312:	fb 1c       	adc	r15, r11
     314:	0c 1d       	adc	r16, r12
     316:	1d 1d       	adc	r17, r13
     318:	e4 82       	std	Z+4, r14	; 0x04
     31a:	f5 82       	std	Z+5, r15	; 0x05
     31c:	06 83       	std	Z+6, r16	; 0x06
     31e:	17 83       	std	Z+7, r17	; 0x07
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	80 83       	st	Z, r24
     324:	24 81       	ldd	r18, Z+4	; 0x04
     326:	35 81       	ldd	r19, Z+5	; 0x05
     328:	46 81       	ldd	r20, Z+6	; 0x06
     32a:	57 81       	ldd	r21, Z+7	; 0x07
     32c:	57 ff       	sbrs	r21, 7
     32e:	1a c0       	rjmp	.+52     	; 0x364 <_fpadd_parts+0x286>
     330:	c9 01       	movw	r24, r18
     332:	aa 27       	eor	r26, r26
     334:	97 fd       	sbrc	r25, 7
     336:	a0 95       	com	r26
     338:	ba 2f       	mov	r27, r26
     33a:	81 70       	andi	r24, 0x01	; 1
     33c:	90 70       	andi	r25, 0x00	; 0
     33e:	a0 70       	andi	r26, 0x00	; 0
     340:	b0 70       	andi	r27, 0x00	; 0
     342:	56 95       	lsr	r21
     344:	47 95       	ror	r20
     346:	37 95       	ror	r19
     348:	27 95       	ror	r18
     34a:	82 2b       	or	r24, r18
     34c:	93 2b       	or	r25, r19
     34e:	a4 2b       	or	r26, r20
     350:	b5 2b       	or	r27, r21
     352:	84 83       	std	Z+4, r24	; 0x04
     354:	95 83       	std	Z+5, r25	; 0x05
     356:	a6 83       	std	Z+6, r26	; 0x06
     358:	b7 83       	std	Z+7, r27	; 0x07
     35a:	82 81       	ldd	r24, Z+2	; 0x02
     35c:	93 81       	ldd	r25, Z+3	; 0x03
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	93 83       	std	Z+3, r25	; 0x03
     362:	82 83       	std	Z+2, r24	; 0x02
     364:	df 01       	movw	r26, r30
     366:	01 c0       	rjmp	.+2      	; 0x36a <_fpadd_parts+0x28c>
     368:	d2 01       	movw	r26, r4
     36a:	cd 01       	movw	r24, r26
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	e2 e1       	ldi	r30, 0x12	; 18
     372:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__epilogue_restores__>

00000376 <__subsf3>:
     376:	a0 e2       	ldi	r26, 0x20	; 32
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	e1 ec       	ldi	r30, 0xC1	; 193
     37c:	f1 e0       	ldi	r31, 0x01	; 1
     37e:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__prologue_saves__+0x18>
     382:	69 83       	std	Y+1, r22	; 0x01
     384:	7a 83       	std	Y+2, r23	; 0x02
     386:	8b 83       	std	Y+3, r24	; 0x03
     388:	9c 83       	std	Y+4, r25	; 0x04
     38a:	2d 83       	std	Y+5, r18	; 0x05
     38c:	3e 83       	std	Y+6, r19	; 0x06
     38e:	4f 83       	std	Y+7, r20	; 0x07
     390:	58 87       	std	Y+8, r21	; 0x08
     392:	e9 e0       	ldi	r30, 0x09	; 9
     394:	ee 2e       	mov	r14, r30
     396:	f1 2c       	mov	r15, r1
     398:	ec 0e       	add	r14, r28
     39a:	fd 1e       	adc	r15, r29
     39c:	ce 01       	movw	r24, r28
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	b7 01       	movw	r22, r14
     3a2:	8e d3       	rcall	.+1820   	; 0xac0 <__unpack_f>
     3a4:	8e 01       	movw	r16, r28
     3a6:	0f 5e       	subi	r16, 0xEF	; 239
     3a8:	1f 4f       	sbci	r17, 0xFF	; 255
     3aa:	ce 01       	movw	r24, r28
     3ac:	05 96       	adiw	r24, 0x05	; 5
     3ae:	b8 01       	movw	r22, r16
     3b0:	87 d3       	rcall	.+1806   	; 0xac0 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	8c de       	rcall	.-744    	; 0xde <_fpadd_parts>
     3c6:	a7 d2       	rcall	.+1358   	; 0x916 <__pack_f>
     3c8:	a0 96       	adiw	r28, 0x20	; 32
     3ca:	e6 e0       	ldi	r30, 0x06	; 6
     3cc:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__epilogue_restores__+0x18>

000003d0 <__addsf3>:
     3d0:	a0 e2       	ldi	r26, 0x20	; 32
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	ee ee       	ldi	r30, 0xEE	; 238
     3d6:	f1 e0       	ldi	r31, 0x01	; 1
     3d8:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__prologue_saves__+0x18>
     3dc:	69 83       	std	Y+1, r22	; 0x01
     3de:	7a 83       	std	Y+2, r23	; 0x02
     3e0:	8b 83       	std	Y+3, r24	; 0x03
     3e2:	9c 83       	std	Y+4, r25	; 0x04
     3e4:	2d 83       	std	Y+5, r18	; 0x05
     3e6:	3e 83       	std	Y+6, r19	; 0x06
     3e8:	4f 83       	std	Y+7, r20	; 0x07
     3ea:	58 87       	std	Y+8, r21	; 0x08
     3ec:	f9 e0       	ldi	r31, 0x09	; 9
     3ee:	ef 2e       	mov	r14, r31
     3f0:	f1 2c       	mov	r15, r1
     3f2:	ec 0e       	add	r14, r28
     3f4:	fd 1e       	adc	r15, r29
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	b7 01       	movw	r22, r14
     3fc:	61 d3       	rcall	.+1730   	; 0xac0 <__unpack_f>
     3fe:	8e 01       	movw	r16, r28
     400:	0f 5e       	subi	r16, 0xEF	; 239
     402:	1f 4f       	sbci	r17, 0xFF	; 255
     404:	ce 01       	movw	r24, r28
     406:	05 96       	adiw	r24, 0x05	; 5
     408:	b8 01       	movw	r22, r16
     40a:	5a d3       	rcall	.+1716   	; 0xac0 <__unpack_f>
     40c:	c7 01       	movw	r24, r14
     40e:	b8 01       	movw	r22, r16
     410:	ae 01       	movw	r20, r28
     412:	47 5e       	subi	r20, 0xE7	; 231
     414:	5f 4f       	sbci	r21, 0xFF	; 255
     416:	63 de       	rcall	.-826    	; 0xde <_fpadd_parts>
     418:	7e d2       	rcall	.+1276   	; 0x916 <__pack_f>
     41a:	a0 96       	adiw	r28, 0x20	; 32
     41c:	e6 e0       	ldi	r30, 0x06	; 6
     41e:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__epilogue_restores__+0x18>

00000422 <__mulsf3>:
     422:	a0 e2       	ldi	r26, 0x20	; 32
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	e7 e1       	ldi	r30, 0x17	; 23
     428:	f2 e0       	ldi	r31, 0x02	; 2
     42a:	0c 94 f2 0e 	jmp	0x1de4	; 0x1de4 <__prologue_saves__>
     42e:	69 83       	std	Y+1, r22	; 0x01
     430:	7a 83       	std	Y+2, r23	; 0x02
     432:	8b 83       	std	Y+3, r24	; 0x03
     434:	9c 83       	std	Y+4, r25	; 0x04
     436:	2d 83       	std	Y+5, r18	; 0x05
     438:	3e 83       	std	Y+6, r19	; 0x06
     43a:	4f 83       	std	Y+7, r20	; 0x07
     43c:	58 87       	std	Y+8, r21	; 0x08
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	be 01       	movw	r22, r28
     444:	67 5f       	subi	r22, 0xF7	; 247
     446:	7f 4f       	sbci	r23, 0xFF	; 255
     448:	3b d3       	rcall	.+1654   	; 0xac0 <__unpack_f>
     44a:	ce 01       	movw	r24, r28
     44c:	05 96       	adiw	r24, 0x05	; 5
     44e:	be 01       	movw	r22, r28
     450:	6f 5e       	subi	r22, 0xEF	; 239
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	35 d3       	rcall	.+1642   	; 0xac0 <__unpack_f>
     456:	99 85       	ldd	r25, Y+9	; 0x09
     458:	92 30       	cpi	r25, 0x02	; 2
     45a:	88 f0       	brcs	.+34     	; 0x47e <__stack+0x1f>
     45c:	89 89       	ldd	r24, Y+17	; 0x11
     45e:	82 30       	cpi	r24, 0x02	; 2
     460:	c8 f0       	brcs	.+50     	; 0x494 <__stack+0x35>
     462:	94 30       	cpi	r25, 0x04	; 4
     464:	19 f4       	brne	.+6      	; 0x46c <__stack+0xd>
     466:	82 30       	cpi	r24, 0x02	; 2
     468:	51 f4       	brne	.+20     	; 0x47e <__stack+0x1f>
     46a:	04 c0       	rjmp	.+8      	; 0x474 <__stack+0x15>
     46c:	84 30       	cpi	r24, 0x04	; 4
     46e:	29 f4       	brne	.+10     	; 0x47a <__stack+0x1b>
     470:	92 30       	cpi	r25, 0x02	; 2
     472:	81 f4       	brne	.+32     	; 0x494 <__stack+0x35>
     474:	8e e6       	ldi	r24, 0x6E	; 110
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	c6 c0       	rjmp	.+396    	; 0x606 <__stack+0x1a7>
     47a:	92 30       	cpi	r25, 0x02	; 2
     47c:	49 f4       	brne	.+18     	; 0x490 <__stack+0x31>
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	9a 85       	ldd	r25, Y+10	; 0x0a
     482:	8a 89       	ldd	r24, Y+18	; 0x12
     484:	98 13       	cpse	r25, r24
     486:	21 e0       	ldi	r18, 0x01	; 1
     488:	2a 87       	std	Y+10, r18	; 0x0a
     48a:	ce 01       	movw	r24, r28
     48c:	09 96       	adiw	r24, 0x09	; 9
     48e:	bb c0       	rjmp	.+374    	; 0x606 <__stack+0x1a7>
     490:	82 30       	cpi	r24, 0x02	; 2
     492:	49 f4       	brne	.+18     	; 0x4a6 <__stack+0x47>
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	9a 85       	ldd	r25, Y+10	; 0x0a
     498:	8a 89       	ldd	r24, Y+18	; 0x12
     49a:	98 13       	cpse	r25, r24
     49c:	21 e0       	ldi	r18, 0x01	; 1
     49e:	2a 8b       	std	Y+18, r18	; 0x12
     4a0:	ce 01       	movw	r24, r28
     4a2:	41 96       	adiw	r24, 0x11	; 17
     4a4:	b0 c0       	rjmp	.+352    	; 0x606 <__stack+0x1a7>
     4a6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4a8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4aa:	4f 84       	ldd	r4, Y+15	; 0x0f
     4ac:	58 88       	ldd	r5, Y+16	; 0x10
     4ae:	6d 88       	ldd	r6, Y+21	; 0x15
     4b0:	7e 88       	ldd	r7, Y+22	; 0x16
     4b2:	8f 88       	ldd	r8, Y+23	; 0x17
     4b4:	98 8c       	ldd	r9, Y+24	; 0x18
     4b6:	ee 24       	eor	r14, r14
     4b8:	ff 24       	eor	r15, r15
     4ba:	87 01       	movw	r16, r14
     4bc:	aa 24       	eor	r10, r10
     4be:	bb 24       	eor	r11, r11
     4c0:	65 01       	movw	r12, r10
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	e0 e0       	ldi	r30, 0x00	; 0
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	c1 01       	movw	r24, r2
     4d0:	81 70       	andi	r24, 0x01	; 1
     4d2:	90 70       	andi	r25, 0x00	; 0
     4d4:	89 2b       	or	r24, r25
     4d6:	e9 f0       	breq	.+58     	; 0x512 <__stack+0xb3>
     4d8:	e6 0c       	add	r14, r6
     4da:	f7 1c       	adc	r15, r7
     4dc:	08 1d       	adc	r16, r8
     4de:	19 1d       	adc	r17, r9
     4e0:	9a 01       	movw	r18, r20
     4e2:	ab 01       	movw	r20, r22
     4e4:	2a 0d       	add	r18, r10
     4e6:	3b 1d       	adc	r19, r11
     4e8:	4c 1d       	adc	r20, r12
     4ea:	5d 1d       	adc	r21, r13
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	a0 e0       	ldi	r26, 0x00	; 0
     4f2:	b0 e0       	ldi	r27, 0x00	; 0
     4f4:	e6 14       	cp	r14, r6
     4f6:	f7 04       	cpc	r15, r7
     4f8:	08 05       	cpc	r16, r8
     4fa:	19 05       	cpc	r17, r9
     4fc:	20 f4       	brcc	.+8      	; 0x506 <__stack+0xa7>
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	a0 e0       	ldi	r26, 0x00	; 0
     504:	b0 e0       	ldi	r27, 0x00	; 0
     506:	ba 01       	movw	r22, r20
     508:	a9 01       	movw	r20, r18
     50a:	48 0f       	add	r20, r24
     50c:	59 1f       	adc	r21, r25
     50e:	6a 1f       	adc	r22, r26
     510:	7b 1f       	adc	r23, r27
     512:	aa 0c       	add	r10, r10
     514:	bb 1c       	adc	r11, r11
     516:	cc 1c       	adc	r12, r12
     518:	dd 1c       	adc	r13, r13
     51a:	97 fe       	sbrs	r9, 7
     51c:	08 c0       	rjmp	.+16     	; 0x52e <__stack+0xcf>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	a8 2a       	or	r10, r24
     528:	b9 2a       	or	r11, r25
     52a:	ca 2a       	or	r12, r26
     52c:	db 2a       	or	r13, r27
     52e:	31 96       	adiw	r30, 0x01	; 1
     530:	e0 32       	cpi	r30, 0x20	; 32
     532:	f1 05       	cpc	r31, r1
     534:	49 f0       	breq	.+18     	; 0x548 <__stack+0xe9>
     536:	66 0c       	add	r6, r6
     538:	77 1c       	adc	r7, r7
     53a:	88 1c       	adc	r8, r8
     53c:	99 1c       	adc	r9, r9
     53e:	56 94       	lsr	r5
     540:	47 94       	ror	r4
     542:	37 94       	ror	r3
     544:	27 94       	ror	r2
     546:	c3 cf       	rjmp	.-122    	; 0x4ce <__stack+0x6f>
     548:	fa 85       	ldd	r31, Y+10	; 0x0a
     54a:	ea 89       	ldd	r30, Y+18	; 0x12
     54c:	2b 89       	ldd	r18, Y+19	; 0x13
     54e:	3c 89       	ldd	r19, Y+20	; 0x14
     550:	8b 85       	ldd	r24, Y+11	; 0x0b
     552:	9c 85       	ldd	r25, Y+12	; 0x0c
     554:	28 0f       	add	r18, r24
     556:	39 1f       	adc	r19, r25
     558:	2e 5f       	subi	r18, 0xFE	; 254
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	17 c0       	rjmp	.+46     	; 0x58c <__stack+0x12d>
     55e:	ca 01       	movw	r24, r20
     560:	81 70       	andi	r24, 0x01	; 1
     562:	90 70       	andi	r25, 0x00	; 0
     564:	89 2b       	or	r24, r25
     566:	61 f0       	breq	.+24     	; 0x580 <__stack+0x121>
     568:	16 95       	lsr	r17
     56a:	07 95       	ror	r16
     56c:	f7 94       	ror	r15
     56e:	e7 94       	ror	r14
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	a0 e0       	ldi	r26, 0x00	; 0
     576:	b0 e8       	ldi	r27, 0x80	; 128
     578:	e8 2a       	or	r14, r24
     57a:	f9 2a       	or	r15, r25
     57c:	0a 2b       	or	r16, r26
     57e:	1b 2b       	or	r17, r27
     580:	76 95       	lsr	r23
     582:	67 95       	ror	r22
     584:	57 95       	ror	r21
     586:	47 95       	ror	r20
     588:	2f 5f       	subi	r18, 0xFF	; 255
     58a:	3f 4f       	sbci	r19, 0xFF	; 255
     58c:	77 fd       	sbrc	r23, 7
     58e:	e7 cf       	rjmp	.-50     	; 0x55e <__stack+0xff>
     590:	0c c0       	rjmp	.+24     	; 0x5aa <__stack+0x14b>
     592:	44 0f       	add	r20, r20
     594:	55 1f       	adc	r21, r21
     596:	66 1f       	adc	r22, r22
     598:	77 1f       	adc	r23, r23
     59a:	17 fd       	sbrc	r17, 7
     59c:	41 60       	ori	r20, 0x01	; 1
     59e:	ee 0c       	add	r14, r14
     5a0:	ff 1c       	adc	r15, r15
     5a2:	00 1f       	adc	r16, r16
     5a4:	11 1f       	adc	r17, r17
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	30 40       	sbci	r19, 0x00	; 0
     5aa:	40 30       	cpi	r20, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	59 07       	cpc	r21, r25
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	69 07       	cpc	r22, r25
     5b4:	90 e4       	ldi	r25, 0x40	; 64
     5b6:	79 07       	cpc	r23, r25
     5b8:	60 f3       	brcs	.-40     	; 0x592 <__stack+0x133>
     5ba:	2b 8f       	std	Y+27, r18	; 0x1b
     5bc:	3c 8f       	std	Y+28, r19	; 0x1c
     5be:	db 01       	movw	r26, r22
     5c0:	ca 01       	movw	r24, r20
     5c2:	8f 77       	andi	r24, 0x7F	; 127
     5c4:	90 70       	andi	r25, 0x00	; 0
     5c6:	a0 70       	andi	r26, 0x00	; 0
     5c8:	b0 70       	andi	r27, 0x00	; 0
     5ca:	80 34       	cpi	r24, 0x40	; 64
     5cc:	91 05       	cpc	r25, r1
     5ce:	a1 05       	cpc	r26, r1
     5d0:	b1 05       	cpc	r27, r1
     5d2:	61 f4       	brne	.+24     	; 0x5ec <__stack+0x18d>
     5d4:	47 fd       	sbrc	r20, 7
     5d6:	0a c0       	rjmp	.+20     	; 0x5ec <__stack+0x18d>
     5d8:	e1 14       	cp	r14, r1
     5da:	f1 04       	cpc	r15, r1
     5dc:	01 05       	cpc	r16, r1
     5de:	11 05       	cpc	r17, r1
     5e0:	29 f0       	breq	.+10     	; 0x5ec <__stack+0x18d>
     5e2:	40 5c       	subi	r20, 0xC0	; 192
     5e4:	5f 4f       	sbci	r21, 0xFF	; 255
     5e6:	6f 4f       	sbci	r22, 0xFF	; 255
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ea:	40 78       	andi	r20, 0x80	; 128
     5ec:	1a 8e       	std	Y+26, r1	; 0x1a
     5ee:	fe 17       	cp	r31, r30
     5f0:	11 f0       	breq	.+4      	; 0x5f6 <__stack+0x197>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	8a 8f       	std	Y+26, r24	; 0x1a
     5f6:	4d 8f       	std	Y+29, r20	; 0x1d
     5f8:	5e 8f       	std	Y+30, r21	; 0x1e
     5fa:	6f 8f       	std	Y+31, r22	; 0x1f
     5fc:	78 a3       	std	Y+32, r23	; 0x20
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	89 8f       	std	Y+25, r24	; 0x19
     602:	ce 01       	movw	r24, r28
     604:	49 96       	adiw	r24, 0x19	; 25
     606:	87 d1       	rcall	.+782    	; 0x916 <__pack_f>
     608:	a0 96       	adiw	r28, 0x20	; 32
     60a:	e2 e1       	ldi	r30, 0x12	; 18
     60c:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__epilogue_restores__>

00000610 <__divsf3>:
     610:	a8 e1       	ldi	r26, 0x18	; 24
     612:	b0 e0       	ldi	r27, 0x00	; 0
     614:	ee e0       	ldi	r30, 0x0E	; 14
     616:	f3 e0       	ldi	r31, 0x03	; 3
     618:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__prologue_saves__+0x10>
     61c:	69 83       	std	Y+1, r22	; 0x01
     61e:	7a 83       	std	Y+2, r23	; 0x02
     620:	8b 83       	std	Y+3, r24	; 0x03
     622:	9c 83       	std	Y+4, r25	; 0x04
     624:	2d 83       	std	Y+5, r18	; 0x05
     626:	3e 83       	std	Y+6, r19	; 0x06
     628:	4f 83       	std	Y+7, r20	; 0x07
     62a:	58 87       	std	Y+8, r21	; 0x08
     62c:	b9 e0       	ldi	r27, 0x09	; 9
     62e:	eb 2e       	mov	r14, r27
     630:	f1 2c       	mov	r15, r1
     632:	ec 0e       	add	r14, r28
     634:	fd 1e       	adc	r15, r29
     636:	ce 01       	movw	r24, r28
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	b7 01       	movw	r22, r14
     63c:	41 d2       	rcall	.+1154   	; 0xac0 <__unpack_f>
     63e:	8e 01       	movw	r16, r28
     640:	0f 5e       	subi	r16, 0xEF	; 239
     642:	1f 4f       	sbci	r17, 0xFF	; 255
     644:	ce 01       	movw	r24, r28
     646:	05 96       	adiw	r24, 0x05	; 5
     648:	b8 01       	movw	r22, r16
     64a:	3a d2       	rcall	.+1140   	; 0xac0 <__unpack_f>
     64c:	29 85       	ldd	r18, Y+9	; 0x09
     64e:	22 30       	cpi	r18, 0x02	; 2
     650:	08 f4       	brcc	.+2      	; 0x654 <__divsf3+0x44>
     652:	7e c0       	rjmp	.+252    	; 0x750 <__divsf3+0x140>
     654:	39 89       	ldd	r19, Y+17	; 0x11
     656:	32 30       	cpi	r19, 0x02	; 2
     658:	10 f4       	brcc	.+4      	; 0x65e <__divsf3+0x4e>
     65a:	b8 01       	movw	r22, r16
     65c:	7c c0       	rjmp	.+248    	; 0x756 <__divsf3+0x146>
     65e:	8a 85       	ldd	r24, Y+10	; 0x0a
     660:	9a 89       	ldd	r25, Y+18	; 0x12
     662:	89 27       	eor	r24, r25
     664:	8a 87       	std	Y+10, r24	; 0x0a
     666:	24 30       	cpi	r18, 0x04	; 4
     668:	11 f0       	breq	.+4      	; 0x66e <__divsf3+0x5e>
     66a:	22 30       	cpi	r18, 0x02	; 2
     66c:	31 f4       	brne	.+12     	; 0x67a <__divsf3+0x6a>
     66e:	23 17       	cp	r18, r19
     670:	09 f0       	breq	.+2      	; 0x674 <__divsf3+0x64>
     672:	6e c0       	rjmp	.+220    	; 0x750 <__divsf3+0x140>
     674:	6e e6       	ldi	r22, 0x6E	; 110
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	6e c0       	rjmp	.+220    	; 0x756 <__divsf3+0x146>
     67a:	34 30       	cpi	r19, 0x04	; 4
     67c:	39 f4       	brne	.+14     	; 0x68c <__divsf3+0x7c>
     67e:	1d 86       	std	Y+13, r1	; 0x0d
     680:	1e 86       	std	Y+14, r1	; 0x0e
     682:	1f 86       	std	Y+15, r1	; 0x0f
     684:	18 8a       	std	Y+16, r1	; 0x10
     686:	1c 86       	std	Y+12, r1	; 0x0c
     688:	1b 86       	std	Y+11, r1	; 0x0b
     68a:	04 c0       	rjmp	.+8      	; 0x694 <__divsf3+0x84>
     68c:	32 30       	cpi	r19, 0x02	; 2
     68e:	21 f4       	brne	.+8      	; 0x698 <__divsf3+0x88>
     690:	84 e0       	ldi	r24, 0x04	; 4
     692:	89 87       	std	Y+9, r24	; 0x09
     694:	b7 01       	movw	r22, r14
     696:	5f c0       	rjmp	.+190    	; 0x756 <__divsf3+0x146>
     698:	2b 85       	ldd	r18, Y+11	; 0x0b
     69a:	3c 85       	ldd	r19, Y+12	; 0x0c
     69c:	8b 89       	ldd	r24, Y+19	; 0x13
     69e:	9c 89       	ldd	r25, Y+20	; 0x14
     6a0:	28 1b       	sub	r18, r24
     6a2:	39 0b       	sbc	r19, r25
     6a4:	3c 87       	std	Y+12, r19	; 0x0c
     6a6:	2b 87       	std	Y+11, r18	; 0x0b
     6a8:	ed 84       	ldd	r14, Y+13	; 0x0d
     6aa:	fe 84       	ldd	r15, Y+14	; 0x0e
     6ac:	0f 85       	ldd	r16, Y+15	; 0x0f
     6ae:	18 89       	ldd	r17, Y+16	; 0x10
     6b0:	ad 88       	ldd	r10, Y+21	; 0x15
     6b2:	be 88       	ldd	r11, Y+22	; 0x16
     6b4:	cf 88       	ldd	r12, Y+23	; 0x17
     6b6:	d8 8c       	ldd	r13, Y+24	; 0x18
     6b8:	ea 14       	cp	r14, r10
     6ba:	fb 04       	cpc	r15, r11
     6bc:	0c 05       	cpc	r16, r12
     6be:	1d 05       	cpc	r17, r13
     6c0:	40 f4       	brcc	.+16     	; 0x6d2 <__divsf3+0xc2>
     6c2:	ee 0c       	add	r14, r14
     6c4:	ff 1c       	adc	r15, r15
     6c6:	00 1f       	adc	r16, r16
     6c8:	11 1f       	adc	r17, r17
     6ca:	21 50       	subi	r18, 0x01	; 1
     6cc:	30 40       	sbci	r19, 0x00	; 0
     6ce:	3c 87       	std	Y+12, r19	; 0x0c
     6d0:	2b 87       	std	Y+11, r18	; 0x0b
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	a0 e0       	ldi	r26, 0x00	; 0
     6e0:	b0 e4       	ldi	r27, 0x40	; 64
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	ea 14       	cp	r14, r10
     6e8:	fb 04       	cpc	r15, r11
     6ea:	0c 05       	cpc	r16, r12
     6ec:	1d 05       	cpc	r17, r13
     6ee:	40 f0       	brcs	.+16     	; 0x700 <__divsf3+0xf0>
     6f0:	28 2b       	or	r18, r24
     6f2:	39 2b       	or	r19, r25
     6f4:	4a 2b       	or	r20, r26
     6f6:	5b 2b       	or	r21, r27
     6f8:	ea 18       	sub	r14, r10
     6fa:	fb 08       	sbc	r15, r11
     6fc:	0c 09       	sbc	r16, r12
     6fe:	1d 09       	sbc	r17, r13
     700:	b6 95       	lsr	r27
     702:	a7 95       	ror	r26
     704:	97 95       	ror	r25
     706:	87 95       	ror	r24
     708:	ee 0c       	add	r14, r14
     70a:	ff 1c       	adc	r15, r15
     70c:	00 1f       	adc	r16, r16
     70e:	11 1f       	adc	r17, r17
     710:	6f 5f       	subi	r22, 0xFF	; 255
     712:	7f 4f       	sbci	r23, 0xFF	; 255
     714:	6f 31       	cpi	r22, 0x1F	; 31
     716:	71 05       	cpc	r23, r1
     718:	31 f7       	brne	.-52     	; 0x6e6 <__divsf3+0xd6>
     71a:	da 01       	movw	r26, r20
     71c:	c9 01       	movw	r24, r18
     71e:	8f 77       	andi	r24, 0x7F	; 127
     720:	90 70       	andi	r25, 0x00	; 0
     722:	a0 70       	andi	r26, 0x00	; 0
     724:	b0 70       	andi	r27, 0x00	; 0
     726:	80 34       	cpi	r24, 0x40	; 64
     728:	91 05       	cpc	r25, r1
     72a:	a1 05       	cpc	r26, r1
     72c:	b1 05       	cpc	r27, r1
     72e:	61 f4       	brne	.+24     	; 0x748 <__divsf3+0x138>
     730:	27 fd       	sbrc	r18, 7
     732:	0a c0       	rjmp	.+20     	; 0x748 <__divsf3+0x138>
     734:	e1 14       	cp	r14, r1
     736:	f1 04       	cpc	r15, r1
     738:	01 05       	cpc	r16, r1
     73a:	11 05       	cpc	r17, r1
     73c:	29 f0       	breq	.+10     	; 0x748 <__divsf3+0x138>
     73e:	20 5c       	subi	r18, 0xC0	; 192
     740:	3f 4f       	sbci	r19, 0xFF	; 255
     742:	4f 4f       	sbci	r20, 0xFF	; 255
     744:	5f 4f       	sbci	r21, 0xFF	; 255
     746:	20 78       	andi	r18, 0x80	; 128
     748:	2d 87       	std	Y+13, r18	; 0x0d
     74a:	3e 87       	std	Y+14, r19	; 0x0e
     74c:	4f 87       	std	Y+15, r20	; 0x0f
     74e:	58 8b       	std	Y+16, r21	; 0x10
     750:	be 01       	movw	r22, r28
     752:	67 5f       	subi	r22, 0xF7	; 247
     754:	7f 4f       	sbci	r23, 0xFF	; 255
     756:	cb 01       	movw	r24, r22
     758:	de d0       	rcall	.+444    	; 0x916 <__pack_f>
     75a:	68 96       	adiw	r28, 0x18	; 24
     75c:	ea e0       	ldi	r30, 0x0A	; 10
     75e:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__epilogue_restores__+0x10>

00000762 <__gtsf2>:
     762:	a8 e1       	ldi	r26, 0x18	; 24
     764:	b0 e0       	ldi	r27, 0x00	; 0
     766:	e7 eb       	ldi	r30, 0xB7	; 183
     768:	f3 e0       	ldi	r31, 0x03	; 3
     76a:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__prologue_saves__+0x18>
     76e:	69 83       	std	Y+1, r22	; 0x01
     770:	7a 83       	std	Y+2, r23	; 0x02
     772:	8b 83       	std	Y+3, r24	; 0x03
     774:	9c 83       	std	Y+4, r25	; 0x04
     776:	2d 83       	std	Y+5, r18	; 0x05
     778:	3e 83       	std	Y+6, r19	; 0x06
     77a:	4f 83       	std	Y+7, r20	; 0x07
     77c:	58 87       	std	Y+8, r21	; 0x08
     77e:	89 e0       	ldi	r24, 0x09	; 9
     780:	e8 2e       	mov	r14, r24
     782:	f1 2c       	mov	r15, r1
     784:	ec 0e       	add	r14, r28
     786:	fd 1e       	adc	r15, r29
     788:	ce 01       	movw	r24, r28
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	b7 01       	movw	r22, r14
     78e:	98 d1       	rcall	.+816    	; 0xac0 <__unpack_f>
     790:	8e 01       	movw	r16, r28
     792:	0f 5e       	subi	r16, 0xEF	; 239
     794:	1f 4f       	sbci	r17, 0xFF	; 255
     796:	ce 01       	movw	r24, r28
     798:	05 96       	adiw	r24, 0x05	; 5
     79a:	b8 01       	movw	r22, r16
     79c:	91 d1       	rcall	.+802    	; 0xac0 <__unpack_f>
     79e:	89 85       	ldd	r24, Y+9	; 0x09
     7a0:	82 30       	cpi	r24, 0x02	; 2
     7a2:	38 f0       	brcs	.+14     	; 0x7b2 <__gtsf2+0x50>
     7a4:	89 89       	ldd	r24, Y+17	; 0x11
     7a6:	82 30       	cpi	r24, 0x02	; 2
     7a8:	20 f0       	brcs	.+8      	; 0x7b2 <__gtsf2+0x50>
     7aa:	c7 01       	movw	r24, r14
     7ac:	b8 01       	movw	r22, r16
     7ae:	00 d2       	rcall	.+1024   	; 0xbb0 <__fpcmp_parts_f>
     7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <__gtsf2+0x52>
     7b2:	8f ef       	ldi	r24, 0xFF	; 255
     7b4:	68 96       	adiw	r28, 0x18	; 24
     7b6:	e6 e0       	ldi	r30, 0x06	; 6
     7b8:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__epilogue_restores__+0x18>

000007bc <__gesf2>:
     7bc:	a8 e1       	ldi	r26, 0x18	; 24
     7be:	b0 e0       	ldi	r27, 0x00	; 0
     7c0:	e4 ee       	ldi	r30, 0xE4	; 228
     7c2:	f3 e0       	ldi	r31, 0x03	; 3
     7c4:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__prologue_saves__+0x18>
     7c8:	69 83       	std	Y+1, r22	; 0x01
     7ca:	7a 83       	std	Y+2, r23	; 0x02
     7cc:	8b 83       	std	Y+3, r24	; 0x03
     7ce:	9c 83       	std	Y+4, r25	; 0x04
     7d0:	2d 83       	std	Y+5, r18	; 0x05
     7d2:	3e 83       	std	Y+6, r19	; 0x06
     7d4:	4f 83       	std	Y+7, r20	; 0x07
     7d6:	58 87       	std	Y+8, r21	; 0x08
     7d8:	89 e0       	ldi	r24, 0x09	; 9
     7da:	e8 2e       	mov	r14, r24
     7dc:	f1 2c       	mov	r15, r1
     7de:	ec 0e       	add	r14, r28
     7e0:	fd 1e       	adc	r15, r29
     7e2:	ce 01       	movw	r24, r28
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	b7 01       	movw	r22, r14
     7e8:	6b d1       	rcall	.+726    	; 0xac0 <__unpack_f>
     7ea:	8e 01       	movw	r16, r28
     7ec:	0f 5e       	subi	r16, 0xEF	; 239
     7ee:	1f 4f       	sbci	r17, 0xFF	; 255
     7f0:	ce 01       	movw	r24, r28
     7f2:	05 96       	adiw	r24, 0x05	; 5
     7f4:	b8 01       	movw	r22, r16
     7f6:	64 d1       	rcall	.+712    	; 0xac0 <__unpack_f>
     7f8:	89 85       	ldd	r24, Y+9	; 0x09
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	38 f0       	brcs	.+14     	; 0x80c <__gesf2+0x50>
     7fe:	89 89       	ldd	r24, Y+17	; 0x11
     800:	82 30       	cpi	r24, 0x02	; 2
     802:	20 f0       	brcs	.+8      	; 0x80c <__gesf2+0x50>
     804:	c7 01       	movw	r24, r14
     806:	b8 01       	movw	r22, r16
     808:	d3 d1       	rcall	.+934    	; 0xbb0 <__fpcmp_parts_f>
     80a:	01 c0       	rjmp	.+2      	; 0x80e <__gesf2+0x52>
     80c:	8f ef       	ldi	r24, 0xFF	; 255
     80e:	68 96       	adiw	r28, 0x18	; 24
     810:	e6 e0       	ldi	r30, 0x06	; 6
     812:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__epilogue_restores__+0x18>

00000816 <__ltsf2>:
     816:	a8 e1       	ldi	r26, 0x18	; 24
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	e1 e1       	ldi	r30, 0x11	; 17
     81c:	f4 e0       	ldi	r31, 0x04	; 4
     81e:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__prologue_saves__+0x18>
     822:	69 83       	std	Y+1, r22	; 0x01
     824:	7a 83       	std	Y+2, r23	; 0x02
     826:	8b 83       	std	Y+3, r24	; 0x03
     828:	9c 83       	std	Y+4, r25	; 0x04
     82a:	2d 83       	std	Y+5, r18	; 0x05
     82c:	3e 83       	std	Y+6, r19	; 0x06
     82e:	4f 83       	std	Y+7, r20	; 0x07
     830:	58 87       	std	Y+8, r21	; 0x08
     832:	89 e0       	ldi	r24, 0x09	; 9
     834:	e8 2e       	mov	r14, r24
     836:	f1 2c       	mov	r15, r1
     838:	ec 0e       	add	r14, r28
     83a:	fd 1e       	adc	r15, r29
     83c:	ce 01       	movw	r24, r28
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	b7 01       	movw	r22, r14
     842:	3e d1       	rcall	.+636    	; 0xac0 <__unpack_f>
     844:	8e 01       	movw	r16, r28
     846:	0f 5e       	subi	r16, 0xEF	; 239
     848:	1f 4f       	sbci	r17, 0xFF	; 255
     84a:	ce 01       	movw	r24, r28
     84c:	05 96       	adiw	r24, 0x05	; 5
     84e:	b8 01       	movw	r22, r16
     850:	37 d1       	rcall	.+622    	; 0xac0 <__unpack_f>
     852:	89 85       	ldd	r24, Y+9	; 0x09
     854:	82 30       	cpi	r24, 0x02	; 2
     856:	38 f0       	brcs	.+14     	; 0x866 <__ltsf2+0x50>
     858:	89 89       	ldd	r24, Y+17	; 0x11
     85a:	82 30       	cpi	r24, 0x02	; 2
     85c:	20 f0       	brcs	.+8      	; 0x866 <__ltsf2+0x50>
     85e:	c7 01       	movw	r24, r14
     860:	b8 01       	movw	r22, r16
     862:	a6 d1       	rcall	.+844    	; 0xbb0 <__fpcmp_parts_f>
     864:	01 c0       	rjmp	.+2      	; 0x868 <__ltsf2+0x52>
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	68 96       	adiw	r28, 0x18	; 24
     86a:	e6 e0       	ldi	r30, 0x06	; 6
     86c:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__epilogue_restores__+0x18>

00000870 <__fixsfsi>:
     870:	ac e0       	ldi	r26, 0x0C	; 12
     872:	b0 e0       	ldi	r27, 0x00	; 0
     874:	ee e3       	ldi	r30, 0x3E	; 62
     876:	f4 e0       	ldi	r31, 0x04	; 4
     878:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__prologue_saves__+0x20>
     87c:	69 83       	std	Y+1, r22	; 0x01
     87e:	7a 83       	std	Y+2, r23	; 0x02
     880:	8b 83       	std	Y+3, r24	; 0x03
     882:	9c 83       	std	Y+4, r25	; 0x04
     884:	ce 01       	movw	r24, r28
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	be 01       	movw	r22, r28
     88a:	6b 5f       	subi	r22, 0xFB	; 251
     88c:	7f 4f       	sbci	r23, 0xFF	; 255
     88e:	18 d1       	rcall	.+560    	; 0xac0 <__unpack_f>
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	61 f1       	breq	.+88     	; 0x8ee <__fixsfsi+0x7e>
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	50 f1       	brcs	.+84     	; 0x8ee <__fixsfsi+0x7e>
     89a:	84 30       	cpi	r24, 0x04	; 4
     89c:	21 f4       	brne	.+8      	; 0x8a6 <__fixsfsi+0x36>
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	88 23       	and	r24, r24
     8a2:	51 f1       	breq	.+84     	; 0x8f8 <__fixsfsi+0x88>
     8a4:	2e c0       	rjmp	.+92     	; 0x902 <__fixsfsi+0x92>
     8a6:	2f 81       	ldd	r18, Y+7	; 0x07
     8a8:	38 85       	ldd	r19, Y+8	; 0x08
     8aa:	37 fd       	sbrc	r19, 7
     8ac:	20 c0       	rjmp	.+64     	; 0x8ee <__fixsfsi+0x7e>
     8ae:	6e 81       	ldd	r22, Y+6	; 0x06
     8b0:	2f 31       	cpi	r18, 0x1F	; 31
     8b2:	31 05       	cpc	r19, r1
     8b4:	1c f0       	brlt	.+6      	; 0x8bc <__fixsfsi+0x4c>
     8b6:	66 23       	and	r22, r22
     8b8:	f9 f0       	breq	.+62     	; 0x8f8 <__fixsfsi+0x88>
     8ba:	23 c0       	rjmp	.+70     	; 0x902 <__fixsfsi+0x92>
     8bc:	8e e1       	ldi	r24, 0x1E	; 30
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	82 1b       	sub	r24, r18
     8c2:	93 0b       	sbc	r25, r19
     8c4:	29 85       	ldd	r18, Y+9	; 0x09
     8c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ca:	5c 85       	ldd	r21, Y+12	; 0x0c
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__fixsfsi+0x66>
     8ce:	56 95       	lsr	r21
     8d0:	47 95       	ror	r20
     8d2:	37 95       	ror	r19
     8d4:	27 95       	ror	r18
     8d6:	8a 95       	dec	r24
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__fixsfsi+0x5e>
     8da:	66 23       	and	r22, r22
     8dc:	b1 f0       	breq	.+44     	; 0x90a <__fixsfsi+0x9a>
     8de:	50 95       	com	r21
     8e0:	40 95       	com	r20
     8e2:	30 95       	com	r19
     8e4:	21 95       	neg	r18
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <__fixsfsi+0x9a>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <__fixsfsi+0x9a>
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	3f ef       	ldi	r19, 0xFF	; 255
     8fc:	4f ef       	ldi	r20, 0xFF	; 255
     8fe:	5f e7       	ldi	r21, 0x7F	; 127
     900:	04 c0       	rjmp	.+8      	; 0x90a <__fixsfsi+0x9a>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e8       	ldi	r21, 0x80	; 128
     90a:	b9 01       	movw	r22, r18
     90c:	ca 01       	movw	r24, r20
     90e:	2c 96       	adiw	r28, 0x0c	; 12
     910:	e2 e0       	ldi	r30, 0x02	; 2
     912:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__epilogue_restores__+0x20>

00000916 <__pack_f>:
     916:	df 92       	push	r13
     918:	ef 92       	push	r14
     91a:	ff 92       	push	r15
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	fc 01       	movw	r30, r24
     922:	e4 80       	ldd	r14, Z+4	; 0x04
     924:	f5 80       	ldd	r15, Z+5	; 0x05
     926:	06 81       	ldd	r16, Z+6	; 0x06
     928:	17 81       	ldd	r17, Z+7	; 0x07
     92a:	d1 80       	ldd	r13, Z+1	; 0x01
     92c:	80 81       	ld	r24, Z
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	48 f4       	brcc	.+18     	; 0x944 <__pack_f+0x2e>
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	a0 e1       	ldi	r26, 0x10	; 16
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	e8 2a       	or	r14, r24
     93c:	f9 2a       	or	r15, r25
     93e:	0a 2b       	or	r16, r26
     940:	1b 2b       	or	r17, r27
     942:	a5 c0       	rjmp	.+330    	; 0xa8e <__pack_f+0x178>
     944:	84 30       	cpi	r24, 0x04	; 4
     946:	09 f4       	brne	.+2      	; 0x94a <__pack_f+0x34>
     948:	9f c0       	rjmp	.+318    	; 0xa88 <__pack_f+0x172>
     94a:	82 30       	cpi	r24, 0x02	; 2
     94c:	21 f4       	brne	.+8      	; 0x956 <__pack_f+0x40>
     94e:	ee 24       	eor	r14, r14
     950:	ff 24       	eor	r15, r15
     952:	87 01       	movw	r16, r14
     954:	05 c0       	rjmp	.+10     	; 0x960 <__pack_f+0x4a>
     956:	e1 14       	cp	r14, r1
     958:	f1 04       	cpc	r15, r1
     95a:	01 05       	cpc	r16, r1
     95c:	11 05       	cpc	r17, r1
     95e:	19 f4       	brne	.+6      	; 0x966 <__pack_f+0x50>
     960:	e0 e0       	ldi	r30, 0x00	; 0
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	96 c0       	rjmp	.+300    	; 0xa92 <__pack_f+0x17c>
     966:	62 81       	ldd	r22, Z+2	; 0x02
     968:	73 81       	ldd	r23, Z+3	; 0x03
     96a:	9f ef       	ldi	r25, 0xFF	; 255
     96c:	62 38       	cpi	r22, 0x82	; 130
     96e:	79 07       	cpc	r23, r25
     970:	0c f0       	brlt	.+2      	; 0x974 <__pack_f+0x5e>
     972:	5b c0       	rjmp	.+182    	; 0xa2a <__pack_f+0x114>
     974:	22 e8       	ldi	r18, 0x82	; 130
     976:	3f ef       	ldi	r19, 0xFF	; 255
     978:	26 1b       	sub	r18, r22
     97a:	37 0b       	sbc	r19, r23
     97c:	2a 31       	cpi	r18, 0x1A	; 26
     97e:	31 05       	cpc	r19, r1
     980:	2c f0       	brlt	.+10     	; 0x98c <__pack_f+0x76>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	2a c0       	rjmp	.+84     	; 0x9e0 <__pack_f+0xca>
     98c:	b8 01       	movw	r22, r16
     98e:	a7 01       	movw	r20, r14
     990:	02 2e       	mov	r0, r18
     992:	04 c0       	rjmp	.+8      	; 0x99c <__pack_f+0x86>
     994:	76 95       	lsr	r23
     996:	67 95       	ror	r22
     998:	57 95       	ror	r21
     99a:	47 95       	ror	r20
     99c:	0a 94       	dec	r0
     99e:	d2 f7       	brpl	.-12     	; 0x994 <__pack_f+0x7e>
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__pack_f+0x9c>
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	aa 1f       	adc	r26, r26
     9b0:	bb 1f       	adc	r27, r27
     9b2:	2a 95       	dec	r18
     9b4:	d2 f7       	brpl	.-12     	; 0x9aa <__pack_f+0x94>
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	a1 09       	sbc	r26, r1
     9ba:	b1 09       	sbc	r27, r1
     9bc:	8e 21       	and	r24, r14
     9be:	9f 21       	and	r25, r15
     9c0:	a0 23       	and	r26, r16
     9c2:	b1 23       	and	r27, r17
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	a1 05       	cpc	r26, r1
     9c8:	b1 05       	cpc	r27, r1
     9ca:	21 f0       	breq	.+8      	; 0x9d4 <__pack_f+0xbe>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	9a 01       	movw	r18, r20
     9d6:	ab 01       	movw	r20, r22
     9d8:	28 2b       	or	r18, r24
     9da:	39 2b       	or	r19, r25
     9dc:	4a 2b       	or	r20, r26
     9de:	5b 2b       	or	r21, r27
     9e0:	da 01       	movw	r26, r20
     9e2:	c9 01       	movw	r24, r18
     9e4:	8f 77       	andi	r24, 0x7F	; 127
     9e6:	90 70       	andi	r25, 0x00	; 0
     9e8:	a0 70       	andi	r26, 0x00	; 0
     9ea:	b0 70       	andi	r27, 0x00	; 0
     9ec:	80 34       	cpi	r24, 0x40	; 64
     9ee:	91 05       	cpc	r25, r1
     9f0:	a1 05       	cpc	r26, r1
     9f2:	b1 05       	cpc	r27, r1
     9f4:	39 f4       	brne	.+14     	; 0xa04 <__pack_f+0xee>
     9f6:	27 ff       	sbrs	r18, 7
     9f8:	09 c0       	rjmp	.+18     	; 0xa0c <__pack_f+0xf6>
     9fa:	20 5c       	subi	r18, 0xC0	; 192
     9fc:	3f 4f       	sbci	r19, 0xFF	; 255
     9fe:	4f 4f       	sbci	r20, 0xFF	; 255
     a00:	5f 4f       	sbci	r21, 0xFF	; 255
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__pack_f+0xf6>
     a04:	21 5c       	subi	r18, 0xC1	; 193
     a06:	3f 4f       	sbci	r19, 0xFF	; 255
     a08:	4f 4f       	sbci	r20, 0xFF	; 255
     a0a:	5f 4f       	sbci	r21, 0xFF	; 255
     a0c:	e0 e0       	ldi	r30, 0x00	; 0
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	20 30       	cpi	r18, 0x00	; 0
     a12:	a0 e0       	ldi	r26, 0x00	; 0
     a14:	3a 07       	cpc	r19, r26
     a16:	a0 e0       	ldi	r26, 0x00	; 0
     a18:	4a 07       	cpc	r20, r26
     a1a:	a0 e4       	ldi	r26, 0x40	; 64
     a1c:	5a 07       	cpc	r21, r26
     a1e:	10 f0       	brcs	.+4      	; 0xa24 <__pack_f+0x10e>
     a20:	e1 e0       	ldi	r30, 0x01	; 1
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	79 01       	movw	r14, r18
     a26:	8a 01       	movw	r16, r20
     a28:	27 c0       	rjmp	.+78     	; 0xa78 <__pack_f+0x162>
     a2a:	60 38       	cpi	r22, 0x80	; 128
     a2c:	71 05       	cpc	r23, r1
     a2e:	64 f5       	brge	.+88     	; 0xa88 <__pack_f+0x172>
     a30:	fb 01       	movw	r30, r22
     a32:	e1 58       	subi	r30, 0x81	; 129
     a34:	ff 4f       	sbci	r31, 0xFF	; 255
     a36:	d8 01       	movw	r26, r16
     a38:	c7 01       	movw	r24, r14
     a3a:	8f 77       	andi	r24, 0x7F	; 127
     a3c:	90 70       	andi	r25, 0x00	; 0
     a3e:	a0 70       	andi	r26, 0x00	; 0
     a40:	b0 70       	andi	r27, 0x00	; 0
     a42:	80 34       	cpi	r24, 0x40	; 64
     a44:	91 05       	cpc	r25, r1
     a46:	a1 05       	cpc	r26, r1
     a48:	b1 05       	cpc	r27, r1
     a4a:	39 f4       	brne	.+14     	; 0xa5a <__pack_f+0x144>
     a4c:	e7 fe       	sbrs	r14, 7
     a4e:	0d c0       	rjmp	.+26     	; 0xa6a <__pack_f+0x154>
     a50:	80 e4       	ldi	r24, 0x40	; 64
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__pack_f+0x14c>
     a5a:	8f e3       	ldi	r24, 0x3F	; 63
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	e8 0e       	add	r14, r24
     a64:	f9 1e       	adc	r15, r25
     a66:	0a 1f       	adc	r16, r26
     a68:	1b 1f       	adc	r17, r27
     a6a:	17 ff       	sbrs	r17, 7
     a6c:	05 c0       	rjmp	.+10     	; 0xa78 <__pack_f+0x162>
     a6e:	16 95       	lsr	r17
     a70:	07 95       	ror	r16
     a72:	f7 94       	ror	r15
     a74:	e7 94       	ror	r14
     a76:	31 96       	adiw	r30, 0x01	; 1
     a78:	87 e0       	ldi	r24, 0x07	; 7
     a7a:	16 95       	lsr	r17
     a7c:	07 95       	ror	r16
     a7e:	f7 94       	ror	r15
     a80:	e7 94       	ror	r14
     a82:	8a 95       	dec	r24
     a84:	d1 f7       	brne	.-12     	; 0xa7a <__pack_f+0x164>
     a86:	05 c0       	rjmp	.+10     	; 0xa92 <__pack_f+0x17c>
     a88:	ee 24       	eor	r14, r14
     a8a:	ff 24       	eor	r15, r15
     a8c:	87 01       	movw	r16, r14
     a8e:	ef ef       	ldi	r30, 0xFF	; 255
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	6e 2f       	mov	r22, r30
     a94:	67 95       	ror	r22
     a96:	66 27       	eor	r22, r22
     a98:	67 95       	ror	r22
     a9a:	90 2f       	mov	r25, r16
     a9c:	9f 77       	andi	r25, 0x7F	; 127
     a9e:	d7 94       	ror	r13
     aa0:	dd 24       	eor	r13, r13
     aa2:	d7 94       	ror	r13
     aa4:	8e 2f       	mov	r24, r30
     aa6:	86 95       	lsr	r24
     aa8:	49 2f       	mov	r20, r25
     aaa:	46 2b       	or	r20, r22
     aac:	58 2f       	mov	r21, r24
     aae:	5d 29       	or	r21, r13
     ab0:	b7 01       	movw	r22, r14
     ab2:	ca 01       	movw	r24, r20
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	ff 90       	pop	r15
     aba:	ef 90       	pop	r14
     abc:	df 90       	pop	r13
     abe:	08 95       	ret

00000ac0 <__unpack_f>:
     ac0:	fc 01       	movw	r30, r24
     ac2:	db 01       	movw	r26, r22
     ac4:	40 81       	ld	r20, Z
     ac6:	51 81       	ldd	r21, Z+1	; 0x01
     ac8:	22 81       	ldd	r18, Z+2	; 0x02
     aca:	62 2f       	mov	r22, r18
     acc:	6f 77       	andi	r22, 0x7F	; 127
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	22 1f       	adc	r18, r18
     ad2:	22 27       	eor	r18, r18
     ad4:	22 1f       	adc	r18, r18
     ad6:	93 81       	ldd	r25, Z+3	; 0x03
     ad8:	89 2f       	mov	r24, r25
     ada:	88 0f       	add	r24, r24
     adc:	82 2b       	or	r24, r18
     ade:	28 2f       	mov	r18, r24
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	99 1f       	adc	r25, r25
     ae4:	99 27       	eor	r25, r25
     ae6:	99 1f       	adc	r25, r25
     ae8:	11 96       	adiw	r26, 0x01	; 1
     aea:	9c 93       	st	X, r25
     aec:	11 97       	sbiw	r26, 0x01	; 1
     aee:	21 15       	cp	r18, r1
     af0:	31 05       	cpc	r19, r1
     af2:	a9 f5       	brne	.+106    	; 0xb5e <__unpack_f+0x9e>
     af4:	41 15       	cp	r20, r1
     af6:	51 05       	cpc	r21, r1
     af8:	61 05       	cpc	r22, r1
     afa:	71 05       	cpc	r23, r1
     afc:	11 f4       	brne	.+4      	; 0xb02 <__unpack_f+0x42>
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	37 c0       	rjmp	.+110    	; 0xb70 <__unpack_f+0xb0>
     b02:	82 e8       	ldi	r24, 0x82	; 130
     b04:	9f ef       	ldi	r25, 0xFF	; 255
     b06:	13 96       	adiw	r26, 0x03	; 3
     b08:	9c 93       	st	X, r25
     b0a:	8e 93       	st	-X, r24
     b0c:	12 97       	sbiw	r26, 0x02	; 2
     b0e:	9a 01       	movw	r18, r20
     b10:	ab 01       	movw	r20, r22
     b12:	67 e0       	ldi	r22, 0x07	; 7
     b14:	22 0f       	add	r18, r18
     b16:	33 1f       	adc	r19, r19
     b18:	44 1f       	adc	r20, r20
     b1a:	55 1f       	adc	r21, r21
     b1c:	6a 95       	dec	r22
     b1e:	d1 f7       	brne	.-12     	; 0xb14 <__unpack_f+0x54>
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	8c 93       	st	X, r24
     b24:	0d c0       	rjmp	.+26     	; 0xb40 <__unpack_f+0x80>
     b26:	22 0f       	add	r18, r18
     b28:	33 1f       	adc	r19, r19
     b2a:	44 1f       	adc	r20, r20
     b2c:	55 1f       	adc	r21, r21
     b2e:	12 96       	adiw	r26, 0x02	; 2
     b30:	8d 91       	ld	r24, X+
     b32:	9c 91       	ld	r25, X
     b34:	13 97       	sbiw	r26, 0x03	; 3
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	13 96       	adiw	r26, 0x03	; 3
     b3a:	9c 93       	st	X, r25
     b3c:	8e 93       	st	-X, r24
     b3e:	12 97       	sbiw	r26, 0x02	; 2
     b40:	20 30       	cpi	r18, 0x00	; 0
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	38 07       	cpc	r19, r24
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	48 07       	cpc	r20, r24
     b4a:	80 e4       	ldi	r24, 0x40	; 64
     b4c:	58 07       	cpc	r21, r24
     b4e:	58 f3       	brcs	.-42     	; 0xb26 <__unpack_f+0x66>
     b50:	14 96       	adiw	r26, 0x04	; 4
     b52:	2d 93       	st	X+, r18
     b54:	3d 93       	st	X+, r19
     b56:	4d 93       	st	X+, r20
     b58:	5c 93       	st	X, r21
     b5a:	17 97       	sbiw	r26, 0x07	; 7
     b5c:	08 95       	ret
     b5e:	2f 3f       	cpi	r18, 0xFF	; 255
     b60:	31 05       	cpc	r19, r1
     b62:	79 f4       	brne	.+30     	; 0xb82 <__unpack_f+0xc2>
     b64:	41 15       	cp	r20, r1
     b66:	51 05       	cpc	r21, r1
     b68:	61 05       	cpc	r22, r1
     b6a:	71 05       	cpc	r23, r1
     b6c:	19 f4       	brne	.+6      	; 0xb74 <__unpack_f+0xb4>
     b6e:	84 e0       	ldi	r24, 0x04	; 4
     b70:	8c 93       	st	X, r24
     b72:	08 95       	ret
     b74:	64 ff       	sbrs	r22, 4
     b76:	03 c0       	rjmp	.+6      	; 0xb7e <__unpack_f+0xbe>
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	8c 93       	st	X, r24
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <__unpack_f+0xe2>
     b7e:	1c 92       	st	X, r1
     b80:	10 c0       	rjmp	.+32     	; 0xba2 <__unpack_f+0xe2>
     b82:	2f 57       	subi	r18, 0x7F	; 127
     b84:	30 40       	sbci	r19, 0x00	; 0
     b86:	13 96       	adiw	r26, 0x03	; 3
     b88:	3c 93       	st	X, r19
     b8a:	2e 93       	st	-X, r18
     b8c:	12 97       	sbiw	r26, 0x02	; 2
     b8e:	83 e0       	ldi	r24, 0x03	; 3
     b90:	8c 93       	st	X, r24
     b92:	87 e0       	ldi	r24, 0x07	; 7
     b94:	44 0f       	add	r20, r20
     b96:	55 1f       	adc	r21, r21
     b98:	66 1f       	adc	r22, r22
     b9a:	77 1f       	adc	r23, r23
     b9c:	8a 95       	dec	r24
     b9e:	d1 f7       	brne	.-12     	; 0xb94 <__unpack_f+0xd4>
     ba0:	70 64       	ori	r23, 0x40	; 64
     ba2:	14 96       	adiw	r26, 0x04	; 4
     ba4:	4d 93       	st	X+, r20
     ba6:	5d 93       	st	X+, r21
     ba8:	6d 93       	st	X+, r22
     baa:	7c 93       	st	X, r23
     bac:	17 97       	sbiw	r26, 0x07	; 7
     bae:	08 95       	ret

00000bb0 <__fpcmp_parts_f>:
     bb0:	1f 93       	push	r17
     bb2:	dc 01       	movw	r26, r24
     bb4:	fb 01       	movw	r30, r22
     bb6:	9c 91       	ld	r25, X
     bb8:	92 30       	cpi	r25, 0x02	; 2
     bba:	08 f4       	brcc	.+2      	; 0xbbe <__fpcmp_parts_f+0xe>
     bbc:	47 c0       	rjmp	.+142    	; 0xc4c <__fpcmp_parts_f+0x9c>
     bbe:	80 81       	ld	r24, Z
     bc0:	82 30       	cpi	r24, 0x02	; 2
     bc2:	08 f4       	brcc	.+2      	; 0xbc6 <__fpcmp_parts_f+0x16>
     bc4:	43 c0       	rjmp	.+134    	; 0xc4c <__fpcmp_parts_f+0x9c>
     bc6:	94 30       	cpi	r25, 0x04	; 4
     bc8:	51 f4       	brne	.+20     	; 0xbde <__fpcmp_parts_f+0x2e>
     bca:	11 96       	adiw	r26, 0x01	; 1
     bcc:	1c 91       	ld	r17, X
     bce:	84 30       	cpi	r24, 0x04	; 4
     bd0:	99 f5       	brne	.+102    	; 0xc38 <__fpcmp_parts_f+0x88>
     bd2:	81 81       	ldd	r24, Z+1	; 0x01
     bd4:	68 2f       	mov	r22, r24
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	61 1b       	sub	r22, r17
     bda:	71 09       	sbc	r23, r1
     bdc:	3f c0       	rjmp	.+126    	; 0xc5c <__fpcmp_parts_f+0xac>
     bde:	84 30       	cpi	r24, 0x04	; 4
     be0:	21 f0       	breq	.+8      	; 0xbea <__fpcmp_parts_f+0x3a>
     be2:	92 30       	cpi	r25, 0x02	; 2
     be4:	31 f4       	brne	.+12     	; 0xbf2 <__fpcmp_parts_f+0x42>
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	b9 f1       	breq	.+110    	; 0xc58 <__fpcmp_parts_f+0xa8>
     bea:	81 81       	ldd	r24, Z+1	; 0x01
     bec:	88 23       	and	r24, r24
     bee:	89 f1       	breq	.+98     	; 0xc52 <__fpcmp_parts_f+0xa2>
     bf0:	2d c0       	rjmp	.+90     	; 0xc4c <__fpcmp_parts_f+0x9c>
     bf2:	11 96       	adiw	r26, 0x01	; 1
     bf4:	1c 91       	ld	r17, X
     bf6:	11 97       	sbiw	r26, 0x01	; 1
     bf8:	82 30       	cpi	r24, 0x02	; 2
     bfa:	f1 f0       	breq	.+60     	; 0xc38 <__fpcmp_parts_f+0x88>
     bfc:	81 81       	ldd	r24, Z+1	; 0x01
     bfe:	18 17       	cp	r17, r24
     c00:	d9 f4       	brne	.+54     	; 0xc38 <__fpcmp_parts_f+0x88>
     c02:	12 96       	adiw	r26, 0x02	; 2
     c04:	2d 91       	ld	r18, X+
     c06:	3c 91       	ld	r19, X
     c08:	13 97       	sbiw	r26, 0x03	; 3
     c0a:	82 81       	ldd	r24, Z+2	; 0x02
     c0c:	93 81       	ldd	r25, Z+3	; 0x03
     c0e:	82 17       	cp	r24, r18
     c10:	93 07       	cpc	r25, r19
     c12:	94 f0       	brlt	.+36     	; 0xc38 <__fpcmp_parts_f+0x88>
     c14:	28 17       	cp	r18, r24
     c16:	39 07       	cpc	r19, r25
     c18:	bc f0       	brlt	.+46     	; 0xc48 <__fpcmp_parts_f+0x98>
     c1a:	14 96       	adiw	r26, 0x04	; 4
     c1c:	8d 91       	ld	r24, X+
     c1e:	9d 91       	ld	r25, X+
     c20:	0d 90       	ld	r0, X+
     c22:	bc 91       	ld	r27, X
     c24:	a0 2d       	mov	r26, r0
     c26:	24 81       	ldd	r18, Z+4	; 0x04
     c28:	35 81       	ldd	r19, Z+5	; 0x05
     c2a:	46 81       	ldd	r20, Z+6	; 0x06
     c2c:	57 81       	ldd	r21, Z+7	; 0x07
     c2e:	28 17       	cp	r18, r24
     c30:	39 07       	cpc	r19, r25
     c32:	4a 07       	cpc	r20, r26
     c34:	5b 07       	cpc	r21, r27
     c36:	18 f4       	brcc	.+6      	; 0xc3e <__fpcmp_parts_f+0x8e>
     c38:	11 23       	and	r17, r17
     c3a:	41 f0       	breq	.+16     	; 0xc4c <__fpcmp_parts_f+0x9c>
     c3c:	0a c0       	rjmp	.+20     	; 0xc52 <__fpcmp_parts_f+0xa2>
     c3e:	82 17       	cp	r24, r18
     c40:	93 07       	cpc	r25, r19
     c42:	a4 07       	cpc	r26, r20
     c44:	b5 07       	cpc	r27, r21
     c46:	40 f4       	brcc	.+16     	; 0xc58 <__fpcmp_parts_f+0xa8>
     c48:	11 23       	and	r17, r17
     c4a:	19 f0       	breq	.+6      	; 0xc52 <__fpcmp_parts_f+0xa2>
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	05 c0       	rjmp	.+10     	; 0xc5c <__fpcmp_parts_f+0xac>
     c52:	6f ef       	ldi	r22, 0xFF	; 255
     c54:	7f ef       	ldi	r23, 0xFF	; 255
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <__fpcmp_parts_f+0xac>
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	cb 01       	movw	r24, r22
     c5e:	1f 91       	pop	r17
     c60:	08 95       	ret

00000c62 <main>:
#include "ultrasonic.h"
#include "lcd.h"
#include "avr/io.h" /* To use the SREG Register */

int main(void)
{
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	00 d0       	rcall	.+0      	; 0xc68 <main+0x6>
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
	uint16 distance = 0;
     c6c:	1a 82       	std	Y+2, r1	; 0x02
     c6e:	19 82       	std	Y+1, r1	; 0x01

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
     c70:	af e5       	ldi	r26, 0x5F	; 95
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	ef e5       	ldi	r30, 0x5F	; 95
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	80 68       	ori	r24, 0x80	; 128
     c7c:	8c 93       	st	X, r24

	/* Initialize the LCD driver */
	LCD_init();
     c7e:	31 d3       	rcall	.+1634   	; 0x12e2 <LCD_init>
     c80:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Ultrasonic_init>

	/* Initialize the Ultrasonic driver */
	Ultrasonic_init();
     c84:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <Ultrasonic_readDistance>

	/* Read the distance from the Ultrasonic sensor */
	distance = Ultrasonic_readDistance();
     c88:	9a 83       	std	Y+2, r25	; 0x02
     c8a:	89 83       	std	Y+1, r24	; 0x01
     c8c:	80 e6       	ldi	r24, 0x60	; 96

	/* Display the distance on LCD screen */
	LCD_displayString("Distance= ");
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	17 d7       	rcall	.+3630   	; 0x1ac0 <LCD_displayString>
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
	LCD_intgerToString(distance);
     c96:	3c d7       	rcall	.+3704   	; 0x1b10 <LCD_intgerToString>
     c98:	8b e6       	ldi	r24, 0x6B	; 107
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	11 d7       	rcall	.+3618   	; 0x1ac0 <LCD_displayString>
	LCD_displayString("cm");
     c9e:	ff cf       	rjmp	.-2      	; 0xc9e <main+0x3c>

00000ca0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <GPIO_setupPinDirection+0x6>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <GPIO_setupPinDirection+0x8>
     ca8:	0f 92       	push	r0
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	6a 83       	std	Y+2, r22	; 0x02
     cb2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	88 30       	cpi	r24, 0x08	; 8
     cb8:	08 f0       	brcs	.+2      	; 0xcbc <GPIO_setupPinDirection+0x1c>
     cba:	d5 c0       	rjmp	.+426    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	84 30       	cpi	r24, 0x04	; 4
     cc0:	08 f0       	brcs	.+2      	; 0xcc4 <GPIO_setupPinDirection+0x24>
     cc2:	d1 c0       	rjmp	.+418    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	3d 83       	std	Y+5, r19	; 0x05
     ccc:	2c 83       	std	Y+4, r18	; 0x04
     cce:	8c 81       	ldd	r24, Y+4	; 0x04
     cd0:	9d 81       	ldd	r25, Y+5	; 0x05
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	91 05       	cpc	r25, r1
     cd6:	09 f4       	brne	.+2      	; 0xcda <GPIO_setupPinDirection+0x3a>
     cd8:	43 c0       	rjmp	.+134    	; 0xd60 <GPIO_setupPinDirection+0xc0>
     cda:	2c 81       	ldd	r18, Y+4	; 0x04
     cdc:	3d 81       	ldd	r19, Y+5	; 0x05
     cde:	22 30       	cpi	r18, 0x02	; 2
     ce0:	31 05       	cpc	r19, r1
     ce2:	2c f4       	brge	.+10     	; 0xcee <GPIO_setupPinDirection+0x4e>
     ce4:	8c 81       	ldd	r24, Y+4	; 0x04
     ce6:	9d 81       	ldd	r25, Y+5	; 0x05
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	71 f0       	breq	.+28     	; 0xd08 <GPIO_setupPinDirection+0x68>
     cec:	bc c0       	rjmp	.+376    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
     cee:	2c 81       	ldd	r18, Y+4	; 0x04
     cf0:	3d 81       	ldd	r19, Y+5	; 0x05
     cf2:	22 30       	cpi	r18, 0x02	; 2
     cf4:	31 05       	cpc	r19, r1
     cf6:	09 f4       	brne	.+2      	; 0xcfa <GPIO_setupPinDirection+0x5a>
     cf8:	5f c0       	rjmp	.+190    	; 0xdb8 <GPIO_setupPinDirection+0x118>
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	9d 81       	ldd	r25, Y+5	; 0x05
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	91 05       	cpc	r25, r1
     d02:	09 f4       	brne	.+2      	; 0xd06 <GPIO_setupPinDirection+0x66>
     d04:	85 c0       	rjmp	.+266    	; 0xe10 <GPIO_setupPinDirection+0x170>
     d06:	af c0       	rjmp	.+350    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	a1 f4       	brne	.+40     	; 0xd36 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d0e:	aa e3       	ldi	r26, 0x3A	; 58
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	ea e3       	ldi	r30, 0x3A	; 58
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <GPIO_setupPinDirection+0x8c>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <GPIO_setupPinDirection+0x88>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	98 c0       	rjmp	.+304    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d36:	aa e3       	ldi	r26, 0x3A	; 58
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	ea e3       	ldi	r30, 0x3A	; 58
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <GPIO_setupPinDirection+0xb4>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <GPIO_setupPinDirection+0xb0>
     d58:	80 95       	com	r24
     d5a:	84 23       	and	r24, r20
     d5c:	8c 93       	st	X, r24
     d5e:	83 c0       	rjmp	.+262    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	a1 f4       	brne	.+40     	; 0xd8e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d66:	a7 e3       	ldi	r26, 0x37	; 55
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e7 e3       	ldi	r30, 0x37	; 55
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <GPIO_setupPinDirection+0xe4>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <GPIO_setupPinDirection+0xe0>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	6c c0       	rjmp	.+216    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     d8e:	a7 e3       	ldi	r26, 0x37	; 55
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e7 e3       	ldi	r30, 0x37	; 55
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <GPIO_setupPinDirection+0x10c>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <GPIO_setupPinDirection+0x108>
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8c 93       	st	X, r24
     db6:	57 c0       	rjmp	.+174    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	a1 f4       	brne	.+40     	; 0xde6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     dbe:	a4 e3       	ldi	r26, 0x34	; 52
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e4 e3       	ldi	r30, 0x34	; 52
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <GPIO_setupPinDirection+0x13c>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <GPIO_setupPinDirection+0x138>
     de0:	84 2b       	or	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	40 c0       	rjmp	.+128    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     de6:	a4 e3       	ldi	r26, 0x34	; 52
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e4 e3       	ldi	r30, 0x34	; 52
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <GPIO_setupPinDirection+0x164>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <GPIO_setupPinDirection+0x160>
     e08:	80 95       	com	r24
     e0a:	84 23       	and	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	2b c0       	rjmp	.+86     	; 0xe66 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	a1 f4       	brne	.+40     	; 0xe3e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e16:	a1 e3       	ldi	r26, 0x31	; 49
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e1 e3       	ldi	r30, 0x31	; 49
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <GPIO_setupPinDirection+0x194>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <GPIO_setupPinDirection+0x190>
     e38:	84 2b       	or	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	14 c0       	rjmp	.+40     	; 0xe66 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e3e:	a1 e3       	ldi	r26, 0x31	; 49
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e1 e3       	ldi	r30, 0x31	; 49
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <GPIO_setupPinDirection+0x1bc>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <GPIO_setupPinDirection+0x1b8>
     e60:	80 95       	com	r24
     e62:	84 23       	and	r24, r20
     e64:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <GPIO_writePin+0x6>
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <GPIO_writePin+0x8>
     e7e:	0f 92       	push	r0
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	6a 83       	std	Y+2, r22	; 0x02
     e88:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	88 30       	cpi	r24, 0x08	; 8
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <GPIO_writePin+0x1c>
     e90:	d5 c0       	rjmp	.+426    	; 0x103c <GPIO_writePin+0x1c6>
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	08 f0       	brcs	.+2      	; 0xe9a <GPIO_writePin+0x24>
     e98:	d1 c0       	rjmp	.+418    	; 0x103c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	3d 83       	std	Y+5, r19	; 0x05
     ea2:	2c 83       	std	Y+4, r18	; 0x04
     ea4:	8c 81       	ldd	r24, Y+4	; 0x04
     ea6:	9d 81       	ldd	r25, Y+5	; 0x05
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	91 05       	cpc	r25, r1
     eac:	09 f4       	brne	.+2      	; 0xeb0 <GPIO_writePin+0x3a>
     eae:	43 c0       	rjmp	.+134    	; 0xf36 <GPIO_writePin+0xc0>
     eb0:	2c 81       	ldd	r18, Y+4	; 0x04
     eb2:	3d 81       	ldd	r19, Y+5	; 0x05
     eb4:	22 30       	cpi	r18, 0x02	; 2
     eb6:	31 05       	cpc	r19, r1
     eb8:	2c f4       	brge	.+10     	; 0xec4 <GPIO_writePin+0x4e>
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	9d 81       	ldd	r25, Y+5	; 0x05
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	71 f0       	breq	.+28     	; 0xede <GPIO_writePin+0x68>
     ec2:	bc c0       	rjmp	.+376    	; 0x103c <GPIO_writePin+0x1c6>
     ec4:	2c 81       	ldd	r18, Y+4	; 0x04
     ec6:	3d 81       	ldd	r19, Y+5	; 0x05
     ec8:	22 30       	cpi	r18, 0x02	; 2
     eca:	31 05       	cpc	r19, r1
     ecc:	09 f4       	brne	.+2      	; 0xed0 <GPIO_writePin+0x5a>
     ece:	5f c0       	rjmp	.+190    	; 0xf8e <GPIO_writePin+0x118>
     ed0:	8c 81       	ldd	r24, Y+4	; 0x04
     ed2:	9d 81       	ldd	r25, Y+5	; 0x05
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	91 05       	cpc	r25, r1
     ed8:	09 f4       	brne	.+2      	; 0xedc <GPIO_writePin+0x66>
     eda:	85 c0       	rjmp	.+266    	; 0xfe6 <GPIO_writePin+0x170>
     edc:	af c0       	rjmp	.+350    	; 0x103c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	a1 f4       	brne	.+40     	; 0xf0c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     ee4:	ab e3       	ldi	r26, 0x3B	; 59
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	eb e3       	ldi	r30, 0x3B	; 59
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <GPIO_writePin+0x8c>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <GPIO_writePin+0x88>
     f06:	84 2b       	or	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	98 c0       	rjmp	.+304    	; 0x103c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     f0c:	ab e3       	ldi	r26, 0x3B	; 59
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	eb e3       	ldi	r30, 0x3B	; 59
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <GPIO_writePin+0xb4>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <GPIO_writePin+0xb0>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	83 c0       	rjmp	.+262    	; 0x103c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	a1 f4       	brne	.+40     	; 0xf64 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     f3c:	a8 e3       	ldi	r26, 0x38	; 56
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e8 e3       	ldi	r30, 0x38	; 56
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <GPIO_writePin+0xe4>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <GPIO_writePin+0xe0>
     f5e:	84 2b       	or	r24, r20
     f60:	8c 93       	st	X, r24
     f62:	6c c0       	rjmp	.+216    	; 0x103c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     f64:	a8 e3       	ldi	r26, 0x38	; 56
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e8 e3       	ldi	r30, 0x38	; 56
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <GPIO_writePin+0x10c>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <GPIO_writePin+0x108>
     f86:	80 95       	com	r24
     f88:	84 23       	and	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	57 c0       	rjmp	.+174    	; 0x103c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	a1 f4       	brne	.+40     	; 0xfbc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f94:	a5 e3       	ldi	r26, 0x35	; 53
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e5 e3       	ldi	r30, 0x35	; 53
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <GPIO_writePin+0x13c>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <GPIO_writePin+0x138>
     fb6:	84 2b       	or	r24, r20
     fb8:	8c 93       	st	X, r24
     fba:	40 c0       	rjmp	.+128    	; 0x103c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     fbc:	a5 e3       	ldi	r26, 0x35	; 53
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e5 e3       	ldi	r30, 0x35	; 53
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 2e       	mov	r0, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <GPIO_writePin+0x164>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <GPIO_writePin+0x160>
     fde:	80 95       	com	r24
     fe0:	84 23       	and	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	2b c0       	rjmp	.+86     	; 0x103c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	a1 f4       	brne	.+40     	; 0x1014 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     fec:	a2 e3       	ldi	r26, 0x32	; 50
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e2 e3       	ldi	r30, 0x32	; 50
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <GPIO_writePin+0x194>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <GPIO_writePin+0x190>
    100e:	84 2b       	or	r24, r20
    1010:	8c 93       	st	X, r24
    1012:	14 c0       	rjmp	.+40     	; 0x103c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1014:	a2 e3       	ldi	r26, 0x32	; 50
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e2 e3       	ldi	r30, 0x32	; 50
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <GPIO_writePin+0x1bc>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <GPIO_writePin+0x1b8>
    1036:	80 95       	com	r24
    1038:	84 23       	and	r24, r20
    103a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	00 d0       	rcall	.+0      	; 0x1052 <GPIO_setupPortDirection+0x6>
    1052:	00 d0       	rcall	.+0      	; 0x1054 <GPIO_setupPortDirection+0x8>
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	89 83       	std	Y+1, r24	; 0x01
    105a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	84 30       	cpi	r24, 0x04	; 4
    1060:	90 f5       	brcc	.+100    	; 0x10c6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	3c 83       	std	Y+4, r19	; 0x04
    106a:	2b 83       	std	Y+3, r18	; 0x03
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	9c 81       	ldd	r25, Y+4	; 0x04
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	91 05       	cpc	r25, r1
    1074:	d1 f0       	breq	.+52     	; 0x10aa <GPIO_setupPortDirection+0x5e>
    1076:	2b 81       	ldd	r18, Y+3	; 0x03
    1078:	3c 81       	ldd	r19, Y+4	; 0x04
    107a:	22 30       	cpi	r18, 0x02	; 2
    107c:	31 05       	cpc	r19, r1
    107e:	2c f4       	brge	.+10     	; 0x108a <GPIO_setupPortDirection+0x3e>
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	61 f0       	breq	.+24     	; 0x10a0 <GPIO_setupPortDirection+0x54>
    1088:	1e c0       	rjmp	.+60     	; 0x10c6 <GPIO_setupPortDirection+0x7a>
    108a:	2b 81       	ldd	r18, Y+3	; 0x03
    108c:	3c 81       	ldd	r19, Y+4	; 0x04
    108e:	22 30       	cpi	r18, 0x02	; 2
    1090:	31 05       	cpc	r19, r1
    1092:	81 f0       	breq	.+32     	; 0x10b4 <GPIO_setupPortDirection+0x68>
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	9c 81       	ldd	r25, Y+4	; 0x04
    1098:	83 30       	cpi	r24, 0x03	; 3
    109a:	91 05       	cpc	r25, r1
    109c:	81 f0       	breq	.+32     	; 0x10be <GPIO_setupPortDirection+0x72>
    109e:	13 c0       	rjmp	.+38     	; 0x10c6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    10a0:	ea e3       	ldi	r30, 0x3A	; 58
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	80 83       	st	Z, r24
    10a8:	0e c0       	rjmp	.+28     	; 0x10c6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    10aa:	e7 e3       	ldi	r30, 0x37	; 55
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	80 83       	st	Z, r24
    10b2:	09 c0       	rjmp	.+18     	; 0x10c6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    10b4:	e4 e3       	ldi	r30, 0x34	; 52
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	80 83       	st	Z, r24
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    10be:	e1 e3       	ldi	r30, 0x31	; 49
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	80 83       	st	Z, r24
			break;
		}
	}
}
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	00 d0       	rcall	.+0      	; 0x10da <GPIO_writePort+0x6>
    10da:	00 d0       	rcall	.+0      	; 0x10dc <GPIO_writePort+0x8>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	84 30       	cpi	r24, 0x04	; 4
    10e8:	90 f5       	brcc	.+100    	; 0x114e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	3c 83       	std	Y+4, r19	; 0x04
    10f2:	2b 83       	std	Y+3, r18	; 0x03
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	9c 81       	ldd	r25, Y+4	; 0x04
    10f8:	81 30       	cpi	r24, 0x01	; 1
    10fa:	91 05       	cpc	r25, r1
    10fc:	d1 f0       	breq	.+52     	; 0x1132 <GPIO_writePort+0x5e>
    10fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1100:	3c 81       	ldd	r19, Y+4	; 0x04
    1102:	22 30       	cpi	r18, 0x02	; 2
    1104:	31 05       	cpc	r19, r1
    1106:	2c f4       	brge	.+10     	; 0x1112 <GPIO_writePort+0x3e>
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	9c 81       	ldd	r25, Y+4	; 0x04
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	61 f0       	breq	.+24     	; 0x1128 <GPIO_writePort+0x54>
    1110:	1e c0       	rjmp	.+60     	; 0x114e <GPIO_writePort+0x7a>
    1112:	2b 81       	ldd	r18, Y+3	; 0x03
    1114:	3c 81       	ldd	r19, Y+4	; 0x04
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	31 05       	cpc	r19, r1
    111a:	81 f0       	breq	.+32     	; 0x113c <GPIO_writePort+0x68>
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	83 30       	cpi	r24, 0x03	; 3
    1122:	91 05       	cpc	r25, r1
    1124:	81 f0       	breq	.+32     	; 0x1146 <GPIO_writePort+0x72>
    1126:	13 c0       	rjmp	.+38     	; 0x114e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1128:	eb e3       	ldi	r30, 0x3B	; 59
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	80 83       	st	Z, r24
    1130:	0e c0       	rjmp	.+28     	; 0x114e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1132:	e8 e3       	ldi	r30, 0x38	; 56
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	80 83       	st	Z, r24
    113a:	09 c0       	rjmp	.+18     	; 0x114e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    113c:	e5 e3       	ldi	r30, 0x35	; 53
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	80 83       	st	Z, r24
    1144:	04 c0       	rjmp	.+8      	; 0x114e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1146:	e2 e3       	ldi	r30, 0x32	; 50
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	80 83       	st	Z, r24
			break;
		}
	}
}
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <__vector_5>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    115c:	1f 92       	push	r1
    115e:	0f 92       	push	r0
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	0f 92       	push	r0
    1164:	11 24       	eor	r1, r1
    1166:	2f 93       	push	r18
    1168:	3f 93       	push	r19
    116a:	4f 93       	push	r20
    116c:	5f 93       	push	r21
    116e:	6f 93       	push	r22
    1170:	7f 93       	push	r23
    1172:	8f 93       	push	r24
    1174:	9f 93       	push	r25
    1176:	af 93       	push	r26
    1178:	bf 93       	push	r27
    117a:	ef 93       	push	r30
    117c:	ff 93       	push	r31
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1186:	80 91 76 00 	lds	r24, 0x0076
    118a:	90 91 77 00 	lds	r25, 0x0077
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	29 f0       	breq	.+10     	; 0x119c <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1192:	e0 91 76 00 	lds	r30, 0x0076
    1196:	f0 91 77 00 	lds	r31, 0x0077
    119a:	09 95       	icall
	}
}
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	ff 91       	pop	r31
    11a2:	ef 91       	pop	r30
    11a4:	bf 91       	pop	r27
    11a6:	af 91       	pop	r26
    11a8:	9f 91       	pop	r25
    11aa:	8f 91       	pop	r24
    11ac:	7f 91       	pop	r23
    11ae:	6f 91       	pop	r22
    11b0:	5f 91       	pop	r21
    11b2:	4f 91       	pop	r20
    11b4:	3f 91       	pop	r19
    11b6:	2f 91       	pop	r18
    11b8:	0f 90       	pop	r0
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	0f 90       	pop	r0
    11be:	1f 90       	pop	r1
    11c0:	18 95       	reti

000011c2 <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <Icu_init+0x6>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    11d0:	a1 e3       	ldi	r26, 0x31	; 49
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e1 e3       	ldi	r30, 0x31	; 49
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	8f 7b       	andi	r24, 0xBF	; 191
    11dc:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    11de:	ef e4       	ldi	r30, 0x4F	; 79
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8c e0       	ldi	r24, 0x0C	; 12
    11e4:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    11e6:	ae e4       	ldi	r26, 0x4E	; 78
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	ee e4       	ldi	r30, 0x4E	; 78
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	98 2f       	mov	r25, r24
    11f2:	98 7f       	andi	r25, 0xF8	; 248
    11f4:	e9 81       	ldd	r30, Y+1	; 0x01
    11f6:	fa 81       	ldd	r31, Y+2	; 0x02
    11f8:	80 81       	ld	r24, Z
    11fa:	89 2b       	or	r24, r25
    11fc:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    11fe:	ae e4       	ldi	r26, 0x4E	; 78
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	ee e4       	ldi	r30, 0x4E	; 78
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	28 2f       	mov	r18, r24
    120a:	2f 7b       	andi	r18, 0xBF	; 191
    120c:	e9 81       	ldd	r30, Y+1	; 0x01
    120e:	fa 81       	ldd	r31, Y+2	; 0x02
    1210:	81 81       	ldd	r24, Z+1	; 0x01
    1212:	88 2f       	mov	r24, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	00 24       	eor	r0, r0
    1218:	96 95       	lsr	r25
    121a:	87 95       	ror	r24
    121c:	07 94       	ror	r0
    121e:	96 95       	lsr	r25
    1220:	87 95       	ror	r24
    1222:	07 94       	ror	r0
    1224:	98 2f       	mov	r25, r24
    1226:	80 2d       	mov	r24, r0
    1228:	82 2b       	or	r24, r18
    122a:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    122c:	ec e4       	ldi	r30, 0x4C	; 76
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	11 82       	std	Z+1, r1	; 0x01
    1232:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    1234:	e6 e4       	ldi	r30, 0x46	; 70
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	11 82       	std	Z+1, r1	; 0x01
    123a:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    123c:	a9 e5       	ldi	r26, 0x59	; 89
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e9 e5       	ldi	r30, 0x59	; 89
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	80 62       	ori	r24, 0x20	; 32
    1248:	8c 93       	st	X, r24
}
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	00 d0       	rcall	.+0      	; 0x125a <Icu_setCallBack+0x6>
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	9a 83       	std	Y+2, r25	; 0x02
    1260:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	9a 81       	ldd	r25, Y+2	; 0x02
    1266:	90 93 77 00 	sts	0x0077, r25
    126a:	80 93 76 00 	sts	0x0076, r24
}
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <Icu_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	0f 92       	push	r0
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1284:	ae e4       	ldi	r26, 0x4E	; 78
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	ee e4       	ldi	r30, 0x4E	; 78
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	28 2f       	mov	r18, r24
    1290:	2f 7b       	andi	r18, 0xBF	; 191
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	00 24       	eor	r0, r0
    129a:	96 95       	lsr	r25
    129c:	87 95       	ror	r24
    129e:	07 94       	ror	r0
    12a0:	96 95       	lsr	r25
    12a2:	87 95       	ror	r24
    12a4:	07 94       	ror	r0
    12a6:	98 2f       	mov	r25, r24
    12a8:	80 2d       	mov	r24, r0
    12aa:	82 2b       	or	r24, r18
    12ac:	8c 93       	st	X, r24
}
    12ae:	0f 90       	pop	r0
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <Icu_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 Icu_getInputCaptureValue(void)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    12be:	e6 e4       	ldi	r30, 0x46	; 70
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	91 81       	ldd	r25, Z+1	; 0x01
}
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <Icu_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_clearTimerValue(void)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    12d4:	ec e4       	ldi	r30, 0x4C	; 76
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	11 82       	std	Z+1, r1	; 0x01
    12da:	10 82       	st	Z, r1
}
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	41 e0       	ldi	r20, 0x01	; 1
    12f0:	d7 dc       	rcall	.-1618   	; 0xca0 <GPIO_setupPinDirection>
    12f2:	81 e0       	ldi	r24, 0x01	; 1
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    12f4:	61 e0       	ldi	r22, 0x01	; 1
    12f6:	41 e0       	ldi	r20, 0x01	; 1
    12f8:	d3 dc       	rcall	.-1626   	; 0xca0 <GPIO_setupPinDirection>
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	62 e0       	ldi	r22, 0x02	; 2
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    12fe:	41 e0       	ldi	r20, 0x01	; 1
    1300:	cf dc       	rcall	.-1634   	; 0xca0 <GPIO_setupPinDirection>
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	6f ef       	ldi	r22, 0xFF	; 255
    1306:	a2 de       	rcall	.-700    	; 0x104c <GPIO_setupPortDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1308:	88 e3       	ldi	r24, 0x38	; 56
    130a:	07 d0       	rcall	.+14     	; 0x131a <LCD_sendCommand>
    130c:	8c e0       	ldi	r24, 0x0C	; 12
    130e:	05 d0       	rcall	.+10     	; 0x131a <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	03 d0       	rcall	.+6      	; 0x131a <LCD_sendCommand>
    1314:	cf 91       	pop	r28
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	e9 97       	sbiw	r28, 0x39	; 57
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	9f dd       	rcall	.-1218   	; 0xe76 <GPIO_writePin>
    1338:	81 e0       	ldi	r24, 0x01	; 1
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    133a:	61 e0       	ldi	r22, 0x01	; 1
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	9b dd       	rcall	.-1226   	; 0xe76 <GPIO_writePin>
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	a0 e8       	ldi	r26, 0x80	; 128
    1346:	bf e3       	ldi	r27, 0x3F	; 63
    1348:	8d ab       	std	Y+53, r24	; 0x35
    134a:	9e ab       	std	Y+54, r25	; 0x36
    134c:	af ab       	std	Y+55, r26	; 0x37
    134e:	b8 af       	std	Y+56, r27	; 0x38
    1350:	6d a9       	ldd	r22, Y+53	; 0x35
    1352:	7e a9       	ldd	r23, Y+54	; 0x36
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1354:	8f a9       	ldd	r24, Y+55	; 0x37
    1356:	98 ad       	ldd	r25, Y+56	; 0x38
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	4a ef       	ldi	r20, 0xFA	; 250
    135e:	54 e4       	ldi	r21, 0x44	; 68
    1360:	60 d8       	rcall	.-3904   	; 0x422 <__mulsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	89 ab       	std	Y+49, r24	; 0x31
    1368:	9a ab       	std	Y+50, r25	; 0x32
    136a:	ab ab       	std	Y+51, r26	; 0x33
    136c:	bc ab       	std	Y+52, r27	; 0x34
    136e:	69 a9       	ldd	r22, Y+49	; 0x31
    1370:	7a a9       	ldd	r23, Y+50	; 0x32
    1372:	8b a9       	ldd	r24, Y+51	; 0x33
	if (__tmp < 1.0)
    1374:	9c a9       	ldd	r25, Y+52	; 0x34
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e8       	ldi	r20, 0x80	; 128
    137c:	5f e3       	ldi	r21, 0x3F	; 63
    137e:	4b da       	rcall	.-2922   	; 0x816 <__ltsf2>
    1380:	88 23       	and	r24, r24
    1382:	2c f4       	brge	.+10     	; 0x138e <LCD_sendCommand+0x74>
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	98 ab       	std	Y+48, r25	; 0x30
    138a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
    138c:	3d c0       	rjmp	.+122    	; 0x1408 <LCD_sendCommand+0xee>
    138e:	69 a9       	ldd	r22, Y+49	; 0x31
    1390:	7a a9       	ldd	r23, Y+50	; 0x32
    1392:	8b a9       	ldd	r24, Y+51	; 0x33
    1394:	9c a9       	ldd	r25, Y+52	; 0x34
	else if (__tmp > 65535)
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	3f ef       	ldi	r19, 0xFF	; 255
    139a:	4f e7       	ldi	r20, 0x7F	; 127
    139c:	57 e4       	ldi	r21, 0x47	; 71
    139e:	e1 d9       	rcall	.-3134   	; 0x762 <__gtsf2>
    13a0:	18 16       	cp	r1, r24
    13a2:	44 f5       	brge	.+80     	; 0x13f4 <LCD_sendCommand+0xda>
    13a4:	6d a9       	ldd	r22, Y+53	; 0x35
    13a6:	7e a9       	ldd	r23, Y+54	; 0x36
    13a8:	8f a9       	ldd	r24, Y+55	; 0x37
    13aa:	98 ad       	ldd	r25, Y+56	; 0x38
    13ac:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e2       	ldi	r20, 0x20	; 32
    13b2:	51 e4       	ldi	r21, 0x41	; 65
    13b4:	36 d8       	rcall	.-3988   	; 0x422 <__mulsf3>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	bc 01       	movw	r22, r24
    13bc:	cd 01       	movw	r24, r26
    13be:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	98 ab       	std	Y+48, r25	; 0x30
    13c8:	8f a7       	std	Y+47, r24	; 0x2f
    13ca:	0f c0       	rjmp	.+30     	; 0x13ea <LCD_sendCommand+0xd0>
    13cc:	88 ec       	ldi	r24, 0xC8	; 200
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	9e a7       	std	Y+46, r25	; 0x2e
    13d2:	8d a7       	std	Y+45, r24	; 0x2d
    13d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    13d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	f1 f7       	brne	.-4      	; 0x13d8 <LCD_sendCommand+0xbe>
    13dc:	9e a7       	std	Y+46, r25	; 0x2e
    13de:	8d a7       	std	Y+45, r24	; 0x2d
    13e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13e2:	98 a9       	ldd	r25, Y+48	; 0x30
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	98 ab       	std	Y+48, r25	; 0x30
    13e8:	8f a7       	std	Y+47, r24	; 0x2f
    13ea:	8f a5       	ldd	r24, Y+47	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ec:	98 a9       	ldd	r25, Y+48	; 0x30
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	69 f7       	brne	.-38     	; 0x13cc <LCD_sendCommand+0xb2>
    13f2:	14 c0       	rjmp	.+40     	; 0x141c <LCD_sendCommand+0x102>
    13f4:	69 a9       	ldd	r22, Y+49	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f6:	7a a9       	ldd	r23, Y+50	; 0x32
    13f8:	8b a9       	ldd	r24, Y+51	; 0x33
    13fa:	9c a9       	ldd	r25, Y+52	; 0x34
    13fc:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	98 ab       	std	Y+48, r25	; 0x30
    1406:	8f a7       	std	Y+47, r24	; 0x2f
    1408:	8f a5       	ldd	r24, Y+47	; 0x2f
    140a:	98 a9       	ldd	r25, Y+48	; 0x30
    140c:	9c a7       	std	Y+44, r25	; 0x2c
    140e:	8b a7       	std	Y+43, r24	; 0x2b
    1410:	8b a5       	ldd	r24, Y+43	; 0x2b
    1412:	9c a5       	ldd	r25, Y+44	; 0x2c
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <LCD_sendCommand+0xfa>
    1418:	9c a7       	std	Y+44, r25	; 0x2c
    141a:	8b a7       	std	Y+43, r24	; 0x2b
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	62 e0       	ldi	r22, 0x02	; 2
    1420:	41 e0       	ldi	r20, 0x01	; 1
    1422:	29 dd       	rcall	.-1454   	; 0xe76 <GPIO_writePin>
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1428:	a0 e8       	ldi	r26, 0x80	; 128
    142a:	bf e3       	ldi	r27, 0x3F	; 63
    142c:	8f a3       	std	Y+39, r24	; 0x27
    142e:	98 a7       	std	Y+40, r25	; 0x28
    1430:	a9 a7       	std	Y+41, r26	; 0x29
    1432:	ba a7       	std	Y+42, r27	; 0x2a
    1434:	6f a1       	ldd	r22, Y+39	; 0x27
    1436:	78 a5       	ldd	r23, Y+40	; 0x28
    1438:	89 a5       	ldd	r24, Y+41	; 0x29
    143a:	9a a5       	ldd	r25, Y+42	; 0x2a
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	4a ef       	ldi	r20, 0xFA	; 250
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1442:	54 e4       	ldi	r21, 0x44	; 68
    1444:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	8b a3       	std	Y+35, r24	; 0x23
    144e:	9c a3       	std	Y+36, r25	; 0x24
    1450:	ad a3       	std	Y+37, r26	; 0x25
    1452:	be a3       	std	Y+38, r27	; 0x26
    1454:	6b a1       	ldd	r22, Y+35	; 0x23
    1456:	7c a1       	ldd	r23, Y+36	; 0x24
    1458:	8d a1       	ldd	r24, Y+37	; 0x25
    145a:	9e a1       	ldd	r25, Y+38	; 0x26
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e8       	ldi	r20, 0x80	; 128
	if (__tmp < 1.0)
    1462:	5f e3       	ldi	r21, 0x3F	; 63
    1464:	d8 d9       	rcall	.-3152   	; 0x816 <__ltsf2>
    1466:	88 23       	and	r24, r24
    1468:	2c f4       	brge	.+10     	; 0x1474 <LCD_sendCommand+0x15a>
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	9a a3       	std	Y+34, r25	; 0x22
    1470:	89 a3       	std	Y+33, r24	; 0x21
    1472:	3e c0       	rjmp	.+124    	; 0x14f0 <LCD_sendCommand+0x1d6>
    1474:	6b a1       	ldd	r22, Y+35	; 0x23
    1476:	7c a1       	ldd	r23, Y+36	; 0x24
    1478:	8d a1       	ldd	r24, Y+37	; 0x25
		__ticks = 1;
    147a:	9e a1       	ldd	r25, Y+38	; 0x26
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	3f ef       	ldi	r19, 0xFF	; 255
    1480:	4f e7       	ldi	r20, 0x7F	; 127
    1482:	57 e4       	ldi	r21, 0x47	; 71
	else if (__tmp > 65535)
    1484:	6e d9       	rcall	.-3364   	; 0x762 <__gtsf2>
    1486:	18 16       	cp	r1, r24
    1488:	4c f5       	brge	.+82     	; 0x14dc <LCD_sendCommand+0x1c2>
    148a:	6f a1       	ldd	r22, Y+39	; 0x27
    148c:	78 a5       	ldd	r23, Y+40	; 0x28
    148e:	89 a5       	ldd	r24, Y+41	; 0x29
    1490:	9a a5       	ldd	r25, Y+42	; 0x2a
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	40 e2       	ldi	r20, 0x20	; 32
    1498:	51 e4       	ldi	r21, 0x41	; 65
    149a:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	bc 01       	movw	r22, r24
    14a4:	cd 01       	movw	r24, r26
    14a6:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	9a a3       	std	Y+34, r25	; 0x22
    14b0:	89 a3       	std	Y+33, r24	; 0x21
    14b2:	0f c0       	rjmp	.+30     	; 0x14d2 <LCD_sendCommand+0x1b8>
    14b4:	88 ec       	ldi	r24, 0xC8	; 200
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	98 a3       	std	Y+32, r25	; 0x20
    14ba:	8f 8f       	std	Y+31, r24	; 0x1f
    14bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14be:	98 a1       	ldd	r25, Y+32	; 0x20
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <LCD_sendCommand+0x1a6>
    14c4:	98 a3       	std	Y+32, r25	; 0x20
    14c6:	8f 8f       	std	Y+31, r24	; 0x1f
    14c8:	89 a1       	ldd	r24, Y+33	; 0x21
    14ca:	9a a1       	ldd	r25, Y+34	; 0x22
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	9a a3       	std	Y+34, r25	; 0x22
    14d0:	89 a3       	std	Y+33, r24	; 0x21
    14d2:	89 a1       	ldd	r24, Y+33	; 0x21
    14d4:	9a a1       	ldd	r25, Y+34	; 0x22
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	69 f7       	brne	.-38     	; 0x14b4 <LCD_sendCommand+0x19a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14da:	14 c0       	rjmp	.+40     	; 0x1504 <LCD_sendCommand+0x1ea>
    14dc:	6b a1       	ldd	r22, Y+35	; 0x23
    14de:	7c a1       	ldd	r23, Y+36	; 0x24
    14e0:	8d a1       	ldd	r24, Y+37	; 0x25
    14e2:	9e a1       	ldd	r25, Y+38	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e4:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	9a a3       	std	Y+34, r25	; 0x22
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ee:	89 a3       	std	Y+33, r24	; 0x21
    14f0:	89 a1       	ldd	r24, Y+33	; 0x21
    14f2:	9a a1       	ldd	r25, Y+34	; 0x22
    14f4:	9e 8f       	std	Y+30, r25	; 0x1e
    14f6:	8d 8f       	std	Y+29, r24	; 0x1d
    14f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <LCD_sendCommand+0x1e2>
    1500:	9e 8f       	std	Y+30, r25	; 0x1e
    1502:	8d 8f       	std	Y+29, r24	; 0x1d
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	69 ad       	ldd	r22, Y+57	; 0x39
    1508:	e5 dd       	rcall	.-1078   	; 0x10d4 <GPIO_writePort>
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	a0 e8       	ldi	r26, 0x80	; 128
    1510:	bf e3       	ldi	r27, 0x3F	; 63
    1512:	89 8f       	std	Y+25, r24	; 0x19
    1514:	9a 8f       	std	Y+26, r25	; 0x1a
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1516:	ab 8f       	std	Y+27, r26	; 0x1b
    1518:	bc 8f       	std	Y+28, r27	; 0x1c
    151a:	69 8d       	ldd	r22, Y+25	; 0x19
    151c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    151e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1520:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	4a ef       	ldi	r20, 0xFA	; 250
    1528:	54 e4       	ldi	r21, 0x44	; 68
    152a:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	8d 8b       	std	Y+21, r24	; 0x15
    1534:	9e 8b       	std	Y+22, r25	; 0x16
    1536:	af 8b       	std	Y+23, r26	; 0x17
    1538:	b8 8f       	std	Y+24, r27	; 0x18
    153a:	6d 89       	ldd	r22, Y+21	; 0x15
    153c:	7e 89       	ldd	r23, Y+22	; 0x16
    153e:	8f 89       	ldd	r24, Y+23	; 0x17
    1540:	98 8d       	ldd	r25, Y+24	; 0x18
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e8       	ldi	r20, 0x80	; 128
    1548:	5f e3       	ldi	r21, 0x3F	; 63
    154a:	65 d9       	rcall	.-3382   	; 0x816 <__ltsf2>
    154c:	88 23       	and	r24, r24
	if (__tmp < 1.0)
    154e:	2c f4       	brge	.+10     	; 0x155a <LCD_sendCommand+0x240>
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	9c 8b       	std	Y+20, r25	; 0x14
    1556:	8b 8b       	std	Y+19, r24	; 0x13
    1558:	3e c0       	rjmp	.+124    	; 0x15d6 <LCD_sendCommand+0x2bc>
    155a:	6d 89       	ldd	r22, Y+21	; 0x15
    155c:	7e 89       	ldd	r23, Y+22	; 0x16
    155e:	8f 89       	ldd	r24, Y+23	; 0x17
    1560:	98 8d       	ldd	r25, Y+24	; 0x18
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	3f ef       	ldi	r19, 0xFF	; 255
		__ticks = 1;
    1566:	4f e7       	ldi	r20, 0x7F	; 127
    1568:	57 e4       	ldi	r21, 0x47	; 71
    156a:	fb d8       	rcall	.-3594   	; 0x762 <__gtsf2>
    156c:	18 16       	cp	r1, r24
    156e:	4c f5       	brge	.+82     	; 0x15c2 <LCD_sendCommand+0x2a8>
	else if (__tmp > 65535)
    1570:	69 8d       	ldd	r22, Y+25	; 0x19
    1572:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1574:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1576:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e2       	ldi	r20, 0x20	; 32
    157e:	51 e4       	ldi	r21, 0x41	; 65
    1580:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1588:	bc 01       	movw	r22, r24
    158a:	cd 01       	movw	r24, r26
    158c:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	9c 8b       	std	Y+20, r25	; 0x14
    1596:	8b 8b       	std	Y+19, r24	; 0x13
    1598:	0f c0       	rjmp	.+30     	; 0x15b8 <LCD_sendCommand+0x29e>
    159a:	88 ec       	ldi	r24, 0xC8	; 200
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9a 8b       	std	Y+18, r25	; 0x12
    15a0:	89 8b       	std	Y+17, r24	; 0x11
    15a2:	89 89       	ldd	r24, Y+17	; 0x11
    15a4:	9a 89       	ldd	r25, Y+18	; 0x12
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <LCD_sendCommand+0x28c>
    15aa:	9a 8b       	std	Y+18, r25	; 0x12
    15ac:	89 8b       	std	Y+17, r24	; 0x11
    15ae:	8b 89       	ldd	r24, Y+19	; 0x13
    15b0:	9c 89       	ldd	r25, Y+20	; 0x14
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	9c 8b       	std	Y+20, r25	; 0x14
    15b6:	8b 8b       	std	Y+19, r24	; 0x13
    15b8:	8b 89       	ldd	r24, Y+19	; 0x13
    15ba:	9c 89       	ldd	r25, Y+20	; 0x14
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	69 f7       	brne	.-38     	; 0x159a <LCD_sendCommand+0x280>
    15c0:	14 c0       	rjmp	.+40     	; 0x15ea <LCD_sendCommand+0x2d0>
    15c2:	6d 89       	ldd	r22, Y+21	; 0x15
    15c4:	7e 89       	ldd	r23, Y+22	; 0x16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c6:	8f 89       	ldd	r24, Y+23	; 0x17
    15c8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ca:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d0:	cb 01       	movw	r24, r22
    15d2:	9c 8b       	std	Y+20, r25	; 0x14
    15d4:	8b 8b       	std	Y+19, r24	; 0x13
    15d6:	8b 89       	ldd	r24, Y+19	; 0x13
    15d8:	9c 89       	ldd	r25, Y+20	; 0x14
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15da:	98 8b       	std	Y+16, r25	; 0x10
    15dc:	8f 87       	std	Y+15, r24	; 0x0f
    15de:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e0:	98 89       	ldd	r25, Y+16	; 0x10
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <LCD_sendCommand+0x2c8>
    15e6:	98 8b       	std	Y+16, r25	; 0x10
    15e8:	8f 87       	std	Y+15, r24	; 0x0f
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	62 e0       	ldi	r22, 0x02	; 2
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	42 dc       	rcall	.-1916   	; 0xe76 <GPIO_writePin>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	a0 e8       	ldi	r26, 0x80	; 128
    15f8:	bf e3       	ldi	r27, 0x3F	; 63
    15fa:	8b 87       	std	Y+11, r24	; 0x0b
    15fc:	9c 87       	std	Y+12, r25	; 0x0c
    15fe:	ad 87       	std	Y+13, r26	; 0x0d
    1600:	be 87       	std	Y+14, r27	; 0x0e
    1602:	6b 85       	ldd	r22, Y+11	; 0x0b
    1604:	7c 85       	ldd	r23, Y+12	; 0x0c
    1606:	8d 85       	ldd	r24, Y+13	; 0x0d
    1608:	9e 85       	ldd	r25, Y+14	; 0x0e
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	4a ef       	ldi	r20, 0xFA	; 250
    1610:	54 e4       	ldi	r21, 0x44	; 68
    1612:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	8f 83       	std	Y+7, r24	; 0x07
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    161c:	98 87       	std	Y+8, r25	; 0x08
    161e:	a9 87       	std	Y+9, r26	; 0x09
    1620:	ba 87       	std	Y+10, r27	; 0x0a
    1622:	6f 81       	ldd	r22, Y+7	; 0x07
    1624:	78 85       	ldd	r23, Y+8	; 0x08
    1626:	89 85       	ldd	r24, Y+9	; 0x09
    1628:	9a 85       	ldd	r25, Y+10	; 0x0a
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e8       	ldi	r20, 0x80	; 128
    1630:	5f e3       	ldi	r21, 0x3F	; 63
    1632:	f1 d8       	rcall	.-3614   	; 0x816 <__ltsf2>
    1634:	88 23       	and	r24, r24
    1636:	2c f4       	brge	.+10     	; 0x1642 <LCD_sendCommand+0x328>
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
	if (__tmp < 1.0)
    163c:	9e 83       	std	Y+6, r25	; 0x06
    163e:	8d 83       	std	Y+5, r24	; 0x05
    1640:	3e c0       	rjmp	.+124    	; 0x16be <LCD_sendCommand+0x3a4>
    1642:	6f 81       	ldd	r22, Y+7	; 0x07
    1644:	78 85       	ldd	r23, Y+8	; 0x08
    1646:	89 85       	ldd	r24, Y+9	; 0x09
    1648:	9a 85       	ldd	r25, Y+10	; 0x0a
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	3f ef       	ldi	r19, 0xFF	; 255
    164e:	4f e7       	ldi	r20, 0x7F	; 127
    1650:	57 e4       	ldi	r21, 0x47	; 71
    1652:	87 d8       	rcall	.-3826   	; 0x762 <__gtsf2>
		__ticks = 1;
    1654:	18 16       	cp	r1, r24
    1656:	4c f5       	brge	.+82     	; 0x16aa <LCD_sendCommand+0x390>
    1658:	6b 85       	ldd	r22, Y+11	; 0x0b
    165a:	7c 85       	ldd	r23, Y+12	; 0x0c
    165c:	8d 85       	ldd	r24, Y+13	; 0x0d
	else if (__tmp > 65535)
    165e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e2       	ldi	r20, 0x20	; 32
    1666:	51 e4       	ldi	r21, 0x41	; 65
    1668:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	9e 83       	std	Y+6, r25	; 0x06
    167e:	8d 83       	std	Y+5, r24	; 0x05
    1680:	0f c0       	rjmp	.+30     	; 0x16a0 <LCD_sendCommand+0x386>
    1682:	88 ec       	ldi	r24, 0xC8	; 200
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9c 83       	std	Y+4, r25	; 0x04
    1688:	8b 83       	std	Y+3, r24	; 0x03
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <LCD_sendCommand+0x374>
    1692:	9c 83       	std	Y+4, r25	; 0x04
    1694:	8b 83       	std	Y+3, r24	; 0x03
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	9e 81       	ldd	r25, Y+6	; 0x06
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	9e 83       	std	Y+6, r25	; 0x06
    169e:	8d 83       	std	Y+5, r24	; 0x05
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	69 f7       	brne	.-38     	; 0x1682 <LCD_sendCommand+0x368>
    16a8:	14 c0       	rjmp	.+40     	; 0x16d2 <LCD_sendCommand+0x3b8>
    16aa:	6f 81       	ldd	r22, Y+7	; 0x07
    16ac:	78 85       	ldd	r23, Y+8	; 0x08
    16ae:	89 85       	ldd	r24, Y+9	; 0x09
    16b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b2:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	9e 83       	std	Y+6, r25	; 0x06
    16bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	9e 81       	ldd	r25, Y+6	; 0x06
    16c2:	9a 83       	std	Y+2, r25	; 0x02
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <LCD_sendCommand+0x3b0>
    16ce:	9a 83       	std	Y+2, r25	; 0x02
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	e9 96       	adiw	r28, 0x39	; 57
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	e9 97       	sbiw	r28, 0x39	; 57
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	41 e0       	ldi	r20, 0x01	; 1
    1700:	ba db       	rcall	.-2188   	; 0xe76 <GPIO_writePin>
    1702:	81 e0       	ldi	r24, 0x01	; 1
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1704:	61 e0       	ldi	r22, 0x01	; 1
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	b6 db       	rcall	.-2196   	; 0xe76 <GPIO_writePin>
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	a0 e8       	ldi	r26, 0x80	; 128
    1710:	bf e3       	ldi	r27, 0x3F	; 63
    1712:	8d ab       	std	Y+53, r24	; 0x35
    1714:	9e ab       	std	Y+54, r25	; 0x36
    1716:	af ab       	std	Y+55, r26	; 0x37
    1718:	b8 af       	std	Y+56, r27	; 0x38
    171a:	6d a9       	ldd	r22, Y+53	; 0x35
    171c:	7e a9       	ldd	r23, Y+54	; 0x36
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171e:	8f a9       	ldd	r24, Y+55	; 0x37
    1720:	98 ad       	ldd	r25, Y+56	; 0x38
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	4a ef       	ldi	r20, 0xFA	; 250
    1728:	54 e4       	ldi	r21, 0x44	; 68
    172a:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	89 ab       	std	Y+49, r24	; 0x31
    1734:	9a ab       	std	Y+50, r25	; 0x32
    1736:	ab ab       	std	Y+51, r26	; 0x33
    1738:	bc ab       	std	Y+52, r27	; 0x34
    173a:	69 a9       	ldd	r22, Y+49	; 0x31
    173c:	7a a9       	ldd	r23, Y+50	; 0x32
	if (__tmp < 1.0)
    173e:	8b a9       	ldd	r24, Y+51	; 0x33
    1740:	9c a9       	ldd	r25, Y+52	; 0x34
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e8       	ldi	r20, 0x80	; 128
    1748:	5f e3       	ldi	r21, 0x3F	; 63
    174a:	65 d8       	rcall	.-3894   	; 0x816 <__ltsf2>
    174c:	88 23       	and	r24, r24
    174e:	2c f4       	brge	.+10     	; 0x175a <LCD_displayCharacter+0x76>
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	98 ab       	std	Y+48, r25	; 0x30
		__ticks = 1;
    1756:	8f a7       	std	Y+47, r24	; 0x2f
    1758:	3f c0       	rjmp	.+126    	; 0x17d8 <LCD_displayCharacter+0xf4>
    175a:	69 a9       	ldd	r22, Y+49	; 0x31
    175c:	7a a9       	ldd	r23, Y+50	; 0x32
    175e:	8b a9       	ldd	r24, Y+51	; 0x33
	else if (__tmp > 65535)
    1760:	9c a9       	ldd	r25, Y+52	; 0x34
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	3f ef       	ldi	r19, 0xFF	; 255
    1766:	4f e7       	ldi	r20, 0x7F	; 127
    1768:	57 e4       	ldi	r21, 0x47	; 71
    176a:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    176e:	18 16       	cp	r1, r24
    1770:	4c f5       	brge	.+82     	; 0x17c4 <LCD_displayCharacter+0xe0>
    1772:	6d a9       	ldd	r22, Y+53	; 0x35
    1774:	7e a9       	ldd	r23, Y+54	; 0x36
    1776:	8f a9       	ldd	r24, Y+55	; 0x37
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1778:	98 ad       	ldd	r25, Y+56	; 0x38
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e2       	ldi	r20, 0x20	; 32
    1780:	51 e4       	ldi	r21, 0x41	; 65
    1782:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	bc 01       	movw	r22, r24
    178c:	cd 01       	movw	r24, r26
    178e:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	98 ab       	std	Y+48, r25	; 0x30
    1798:	8f a7       	std	Y+47, r24	; 0x2f
    179a:	0f c0       	rjmp	.+30     	; 0x17ba <LCD_displayCharacter+0xd6>
    179c:	88 ec       	ldi	r24, 0xC8	; 200
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	9e a7       	std	Y+46, r25	; 0x2e
    17a2:	8d a7       	std	Y+45, r24	; 0x2d
    17a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    17a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <LCD_displayCharacter+0xc4>
    17ac:	9e a7       	std	Y+46, r25	; 0x2e
    17ae:	8d a7       	std	Y+45, r24	; 0x2d
    17b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17b2:	98 a9       	ldd	r25, Y+48	; 0x30
    17b4:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b6:	98 ab       	std	Y+48, r25	; 0x30
    17b8:	8f a7       	std	Y+47, r24	; 0x2f
    17ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    17bc:	98 a9       	ldd	r25, Y+48	; 0x30
    17be:	00 97       	sbiw	r24, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c0:	69 f7       	brne	.-38     	; 0x179c <LCD_displayCharacter+0xb8>
    17c2:	14 c0       	rjmp	.+40     	; 0x17ec <LCD_displayCharacter+0x108>
    17c4:	69 a9       	ldd	r22, Y+49	; 0x31
    17c6:	7a a9       	ldd	r23, Y+50	; 0x32
    17c8:	8b a9       	ldd	r24, Y+51	; 0x33
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ca:	9c a9       	ldd	r25, Y+52	; 0x34
    17cc:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	98 ab       	std	Y+48, r25	; 0x30
    17d6:	8f a7       	std	Y+47, r24	; 0x2f
    17d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    17da:	98 a9       	ldd	r25, Y+48	; 0x30
    17dc:	9c a7       	std	Y+44, r25	; 0x2c
    17de:	8b a7       	std	Y+43, r24	; 0x2b
    17e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    17e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <LCD_displayCharacter+0x100>
    17e8:	9c a7       	std	Y+44, r25	; 0x2c
    17ea:	8b a7       	std	Y+43, r24	; 0x2b
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	62 e0       	ldi	r22, 0x02	; 2
    17f0:	41 e0       	ldi	r20, 0x01	; 1
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    17f2:	41 db       	rcall	.-2430   	; 0xe76 <GPIO_writePin>
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	a0 e8       	ldi	r26, 0x80	; 128
    17fa:	bf e3       	ldi	r27, 0x3F	; 63
    17fc:	8f a3       	std	Y+39, r24	; 0x27
    17fe:	98 a7       	std	Y+40, r25	; 0x28
    1800:	a9 a7       	std	Y+41, r26	; 0x29
    1802:	ba a7       	std	Y+42, r27	; 0x2a
    1804:	6f a1       	ldd	r22, Y+39	; 0x27
    1806:	78 a5       	ldd	r23, Y+40	; 0x28
    1808:	89 a5       	ldd	r24, Y+41	; 0x29
    180a:	9a a5       	ldd	r25, Y+42	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	4a ef       	ldi	r20, 0xFA	; 250
    1812:	54 e4       	ldi	r21, 0x44	; 68
    1814:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	8b a3       	std	Y+35, r24	; 0x23
    181e:	9c a3       	std	Y+36, r25	; 0x24
    1820:	ad a3       	std	Y+37, r26	; 0x25
    1822:	be a3       	std	Y+38, r27	; 0x26
    1824:	6b a1       	ldd	r22, Y+35	; 0x23
    1826:	7c a1       	ldd	r23, Y+36	; 0x24
    1828:	8d a1       	ldd	r24, Y+37	; 0x25
    182a:	9e a1       	ldd	r25, Y+38	; 0x26
	if (__tmp < 1.0)
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e8       	ldi	r20, 0x80	; 128
    1832:	5f e3       	ldi	r21, 0x3F	; 63
    1834:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    1838:	88 23       	and	r24, r24
    183a:	2c f4       	brge	.+10     	; 0x1846 <LCD_displayCharacter+0x162>
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	9a a3       	std	Y+34, r25	; 0x22
    1842:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
    1844:	3f c0       	rjmp	.+126    	; 0x18c4 <LCD_displayCharacter+0x1e0>
    1846:	6b a1       	ldd	r22, Y+35	; 0x23
    1848:	7c a1       	ldd	r23, Y+36	; 0x24
    184a:	8d a1       	ldd	r24, Y+37	; 0x25
    184c:	9e a1       	ldd	r25, Y+38	; 0x26
	else if (__tmp > 65535)
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	3f ef       	ldi	r19, 0xFF	; 255
    1852:	4f e7       	ldi	r20, 0x7F	; 127
    1854:	57 e4       	ldi	r21, 0x47	; 71
    1856:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    185a:	18 16       	cp	r1, r24
    185c:	4c f5       	brge	.+82     	; 0x18b0 <LCD_displayCharacter+0x1cc>
    185e:	6f a1       	ldd	r22, Y+39	; 0x27
    1860:	78 a5       	ldd	r23, Y+40	; 0x28
    1862:	89 a5       	ldd	r24, Y+41	; 0x29
    1864:	9a a5       	ldd	r25, Y+42	; 0x2a
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e2       	ldi	r20, 0x20	; 32
    186c:	51 e4       	ldi	r21, 0x41	; 65
    186e:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	bc 01       	movw	r22, r24
    1878:	cd 01       	movw	r24, r26
    187a:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	9a a3       	std	Y+34, r25	; 0x22
    1884:	89 a3       	std	Y+33, r24	; 0x21
    1886:	0f c0       	rjmp	.+30     	; 0x18a6 <LCD_displayCharacter+0x1c2>
    1888:	88 ec       	ldi	r24, 0xC8	; 200
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	98 a3       	std	Y+32, r25	; 0x20
    188e:	8f 8f       	std	Y+31, r24	; 0x1f
    1890:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1892:	98 a1       	ldd	r25, Y+32	; 0x20
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <LCD_displayCharacter+0x1b0>
    1898:	98 a3       	std	Y+32, r25	; 0x20
    189a:	8f 8f       	std	Y+31, r24	; 0x1f
    189c:	89 a1       	ldd	r24, Y+33	; 0x21
    189e:	9a a1       	ldd	r25, Y+34	; 0x22
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	9a a3       	std	Y+34, r25	; 0x22
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a4:	89 a3       	std	Y+33, r24	; 0x21
    18a6:	89 a1       	ldd	r24, Y+33	; 0x21
    18a8:	9a a1       	ldd	r25, Y+34	; 0x22
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	69 f7       	brne	.-38     	; 0x1888 <LCD_displayCharacter+0x1a4>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ae:	14 c0       	rjmp	.+40     	; 0x18d8 <LCD_displayCharacter+0x1f4>
    18b0:	6b a1       	ldd	r22, Y+35	; 0x23
    18b2:	7c a1       	ldd	r23, Y+36	; 0x24
    18b4:	8d a1       	ldd	r24, Y+37	; 0x25
    18b6:	9e a1       	ldd	r25, Y+38	; 0x26
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b8:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	9a a3       	std	Y+34, r25	; 0x22
    18c2:	89 a3       	std	Y+33, r24	; 0x21
    18c4:	89 a1       	ldd	r24, Y+33	; 0x21
    18c6:	9a a1       	ldd	r25, Y+34	; 0x22
    18c8:	9e 8f       	std	Y+30, r25	; 0x1e
    18ca:	8d 8f       	std	Y+29, r24	; 0x1d
    18cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	f1 f7       	brne	.-4      	; 0x18d0 <LCD_displayCharacter+0x1ec>
    18d4:	9e 8f       	std	Y+30, r25	; 0x1e
    18d6:	8d 8f       	std	Y+29, r24	; 0x1d
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	69 ad       	ldd	r22, Y+57	; 0x39
    18dc:	fb db       	rcall	.-2058   	; 0x10d4 <GPIO_writePort>
    18de:	80 e0       	ldi	r24, 0x00	; 0
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a0 e8       	ldi	r26, 0x80	; 128
    18e4:	bf e3       	ldi	r27, 0x3F	; 63
    18e6:	89 8f       	std	Y+25, r24	; 0x19
    18e8:	9a 8f       	std	Y+26, r25	; 0x1a
    18ea:	ab 8f       	std	Y+27, r26	; 0x1b
    18ec:	bc 8f       	std	Y+28, r27	; 0x1c
    18ee:	69 8d       	ldd	r22, Y+25	; 0x19
    18f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f6:	20 e0       	ldi	r18, 0x00	; 0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	4a ef       	ldi	r20, 0xFA	; 250
    18fc:	54 e4       	ldi	r21, 0x44	; 68
    18fe:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	8d 8b       	std	Y+21, r24	; 0x15
    1908:	9e 8b       	std	Y+22, r25	; 0x16
    190a:	af 8b       	std	Y+23, r26	; 0x17
    190c:	b8 8f       	std	Y+24, r27	; 0x18
    190e:	6d 89       	ldd	r22, Y+21	; 0x15
    1910:	7e 89       	ldd	r23, Y+22	; 0x16
    1912:	8f 89       	ldd	r24, Y+23	; 0x17
    1914:	98 8d       	ldd	r25, Y+24	; 0x18
    1916:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e8       	ldi	r20, 0x80	; 128
    191c:	5f e3       	ldi	r21, 0x3F	; 63
    191e:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    1922:	88 23       	and	r24, r24
    1924:	2c f4       	brge	.+10     	; 0x1930 <LCD_displayCharacter+0x24c>
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	9c 8b       	std	Y+20, r25	; 0x14
    192c:	8b 8b       	std	Y+19, r24	; 0x13
    192e:	3f c0       	rjmp	.+126    	; 0x19ae <LCD_displayCharacter+0x2ca>
		__ticks = 1;
    1930:	6d 89       	ldd	r22, Y+21	; 0x15
    1932:	7e 89       	ldd	r23, Y+22	; 0x16
    1934:	8f 89       	ldd	r24, Y+23	; 0x17
    1936:	98 8d       	ldd	r25, Y+24	; 0x18
    1938:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
    193a:	3f ef       	ldi	r19, 0xFF	; 255
    193c:	4f e7       	ldi	r20, 0x7F	; 127
    193e:	57 e4       	ldi	r21, 0x47	; 71
    1940:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    1944:	18 16       	cp	r1, r24
    1946:	4c f5       	brge	.+82     	; 0x199a <LCD_displayCharacter+0x2b6>
    1948:	69 8d       	ldd	r22, Y+25	; 0x19
    194a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    194c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    194e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1950:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e2       	ldi	r20, 0x20	; 32
    1956:	51 e4       	ldi	r21, 0x41	; 65
    1958:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	9c 8b       	std	Y+20, r25	; 0x14
    196e:	8b 8b       	std	Y+19, r24	; 0x13
    1970:	0f c0       	rjmp	.+30     	; 0x1990 <LCD_displayCharacter+0x2ac>
    1972:	88 ec       	ldi	r24, 0xC8	; 200
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	9a 8b       	std	Y+18, r25	; 0x12
    1978:	89 8b       	std	Y+17, r24	; 0x11
    197a:	89 89       	ldd	r24, Y+17	; 0x11
    197c:	9a 89       	ldd	r25, Y+18	; 0x12
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <LCD_displayCharacter+0x29a>
    1982:	9a 8b       	std	Y+18, r25	; 0x12
    1984:	89 8b       	std	Y+17, r24	; 0x11
    1986:	8b 89       	ldd	r24, Y+19	; 0x13
    1988:	9c 89       	ldd	r25, Y+20	; 0x14
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	9c 8b       	std	Y+20, r25	; 0x14
    198e:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1990:	8b 89       	ldd	r24, Y+19	; 0x13
    1992:	9c 89       	ldd	r25, Y+20	; 0x14
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	69 f7       	brne	.-38     	; 0x1972 <LCD_displayCharacter+0x28e>
    1998:	14 c0       	rjmp	.+40     	; 0x19c2 <LCD_displayCharacter+0x2de>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199a:	6d 89       	ldd	r22, Y+21	; 0x15
    199c:	7e 89       	ldd	r23, Y+22	; 0x16
    199e:	8f 89       	ldd	r24, Y+23	; 0x17
    19a0:	98 8d       	ldd	r25, Y+24	; 0x18
    19a2:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	9c 8b       	std	Y+20, r25	; 0x14
    19ac:	8b 8b       	std	Y+19, r24	; 0x13
    19ae:	8b 89       	ldd	r24, Y+19	; 0x13
    19b0:	9c 89       	ldd	r25, Y+20	; 0x14
    19b2:	98 8b       	std	Y+16, r25	; 0x10
    19b4:	8f 87       	std	Y+15, r24	; 0x0f
    19b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b8:	98 89       	ldd	r25, Y+16	; 0x10
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <LCD_displayCharacter+0x2d6>
    19be:	98 8b       	std	Y+16, r25	; 0x10
    19c0:	8f 87       	std	Y+15, r24	; 0x0f
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	62 e0       	ldi	r22, 0x02	; 2
    19c6:	40 e0       	ldi	r20, 0x00	; 0
    19c8:	56 da       	rcall	.-2900   	; 0xe76 <GPIO_writePin>
    19ca:	80 e0       	ldi	r24, 0x00	; 0
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	a0 e8       	ldi	r26, 0x80	; 128
    19d0:	bf e3       	ldi	r27, 0x3F	; 63
    19d2:	8b 87       	std	Y+11, r24	; 0x0b
    19d4:	9c 87       	std	Y+12, r25	; 0x0c
    19d6:	ad 87       	std	Y+13, r26	; 0x0d
    19d8:	be 87       	std	Y+14, r27	; 0x0e
    19da:	6b 85       	ldd	r22, Y+11	; 0x0b
    19dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19de:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e6:	4a ef       	ldi	r20, 0xFA	; 250
    19e8:	54 e4       	ldi	r21, 0x44	; 68
    19ea:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	8f 83       	std	Y+7, r24	; 0x07
    19f4:	98 87       	std	Y+8, r25	; 0x08
    19f6:	a9 87       	std	Y+9, r26	; 0x09
    19f8:	ba 87       	std	Y+10, r27	; 0x0a
    19fa:	6f 81       	ldd	r22, Y+7	; 0x07
    19fc:	78 85       	ldd	r23, Y+8	; 0x08
    19fe:	89 85       	ldd	r24, Y+9	; 0x09
    1a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
    1a06:	40 e8       	ldi	r20, 0x80	; 128
    1a08:	5f e3       	ldi	r21, 0x3F	; 63
    1a0a:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    1a0e:	88 23       	and	r24, r24
    1a10:	2c f4       	brge	.+10     	; 0x1a1c <LCD_displayCharacter+0x338>
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	8d 83       	std	Y+5, r24	; 0x05
    1a1a:	3f c0       	rjmp	.+126    	; 0x1a9a <LCD_displayCharacter+0x3b6>
    1a1c:	6f 81       	ldd	r22, Y+7	; 0x07
		__ticks = 1;
    1a1e:	78 85       	ldd	r23, Y+8	; 0x08
    1a20:	89 85       	ldd	r24, Y+9	; 0x09
    1a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
    1a28:	4f e7       	ldi	r20, 0x7F	; 127
    1a2a:	57 e4       	ldi	r21, 0x47	; 71
    1a2c:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    1a30:	18 16       	cp	r1, r24
    1a32:	4c f5       	brge	.+82     	; 0x1a86 <LCD_displayCharacter+0x3a2>
    1a34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a40:	40 e2       	ldi	r20, 0x20	; 32
    1a42:	51 e4       	ldi	r21, 0x41	; 65
    1a44:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	bc 01       	movw	r22, r24
    1a4e:	cd 01       	movw	r24, r26
    1a50:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
    1a5c:	0f c0       	rjmp	.+30     	; 0x1a7c <LCD_displayCharacter+0x398>
    1a5e:	88 ec       	ldi	r24, 0xC8	; 200
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	9c 83       	std	Y+4, r25	; 0x04
    1a64:	8b 83       	std	Y+3, r24	; 0x03
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	f1 f7       	brne	.-4      	; 0x1a6a <LCD_displayCharacter+0x386>
    1a6e:	9c 83       	std	Y+4, r25	; 0x04
    1a70:	8b 83       	std	Y+3, r24	; 0x03
    1a72:	8d 81       	ldd	r24, Y+5	; 0x05
    1a74:	9e 81       	ldd	r25, Y+6	; 0x06
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	9e 83       	std	Y+6, r25	; 0x06
    1a7a:	8d 83       	std	Y+5, r24	; 0x05
    1a7c:	8d 81       	ldd	r24, Y+5	; 0x05
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	69 f7       	brne	.-38     	; 0x1a5e <LCD_displayCharacter+0x37a>
    1a84:	14 c0       	rjmp	.+40     	; 0x1aae <LCD_displayCharacter+0x3ca>
    1a86:	6f 81       	ldd	r22, Y+7	; 0x07
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a88:	78 85       	ldd	r23, Y+8	; 0x08
    1a8a:	89 85       	ldd	r24, Y+9	; 0x09
    1a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8e:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	9e 83       	std	Y+6, r25	; 0x06
    1a98:	8d 83       	std	Y+5, r24	; 0x05
    1a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9e:	9a 83       	std	Y+2, r25	; 0x02
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	f1 f7       	brne	.-4      	; 0x1aa6 <LCD_displayCharacter+0x3c2>
    1aaa:	9a 83       	std	Y+2, r25	; 0x02
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	e9 96       	adiw	r28, 0x39	; 57
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <LCD_displayString+0x6>
    1ac6:	0f 92       	push	r0
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	9b 83       	std	Y+3, r25	; 0x03
    1ace:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ad0:	19 82       	std	Y+1, r1	; 0x01
    1ad2:	0d c0       	rjmp	.+26     	; 0x1aee <LCD_displayString+0x2e>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ade:	fc 01       	movw	r30, r24
    1ae0:	e2 0f       	add	r30, r18
    1ae2:	f3 1f       	adc	r31, r19
    1ae4:	80 81       	ld	r24, Z
    1ae6:	fe dd       	rcall	.-1028   	; 0x16e4 <LCD_displayCharacter>
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
		i++;
    1aea:	8f 5f       	subi	r24, 0xFF	; 255
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	9b 81       	ldd	r25, Y+3	; 0x03
    1af8:	fc 01       	movw	r30, r24
    1afa:	e2 0f       	add	r30, r18
    1afc:	f3 1f       	adc	r31, r19
    1afe:	80 81       	ld	r24, Z
    1b00:	88 23       	and	r24, r24
    1b02:	41 f7       	brne	.-48     	; 0x1ad4 <LCD_displayString+0x14>
    1b04:	0f 90       	pop	r0
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	62 97       	sbiw	r28, 0x12	; 18
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	9a 8b       	std	Y+18, r25	; 0x12
    1b26:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1b28:	89 89       	ldd	r24, Y+17	; 0x11
    1b2a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b2c:	9e 01       	movw	r18, r28
    1b2e:	2f 5f       	subi	r18, 0xFF	; 255
    1b30:	3f 4f       	sbci	r19, 0xFF	; 255
    1b32:	b9 01       	movw	r22, r18
    1b34:	4a e0       	ldi	r20, 0x0A	; 10
    1b36:	50 e0       	ldi	r21, 0x00	; 0
    1b38:	8c d1       	rcall	.+792    	; 0x1e52 <itoa>
    1b3a:	ce 01       	movw	r24, r28
   LCD_displayString(buff); /* Display the string */
    1b3c:	01 96       	adiw	r24, 0x01	; 1
    1b3e:	c0 df       	rcall	.-128    	; 0x1ac0 <LCD_displayString>
    1b40:	62 96       	adiw	r28, 0x12	; 18
    1b42:	0f b6       	in	r0, 0x3f	; 63
}
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <Ultrasonic_edgeProcessing>:
/*
 * Description :
 * Call-Back Function used to calculate g_timeHigh for the Ultrasonic pulse
 */
static void Ultrasonic_edgeProcessing(void)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    1b5a:	80 91 78 00 	lds	r24, 0x0078
    1b5e:	8f 5f       	subi	r24, 0xFF	; 255
    1b60:	80 93 78 00 	sts	0x0078, r24
	if(g_edgeCount == 1)
    1b64:	80 91 78 00 	lds	r24, 0x0078
    1b68:	81 30       	cpi	r24, 0x01	; 1
    1b6a:	21 f4       	brne	.+8      	; 0x1b74 <Ultrasonic_edgeProcessing+0x22>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		Icu_clearTimerValue();
    1b6c:	af db       	rcall	.-2210   	; 0x12cc <Icu_clearTimerValue>
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
		/* Detect falling edge */
		Icu_setEdgeDetectionType(FALLING);
    1b70:	83 db       	rcall	.-2298   	; 0x1278 <Icu_setEdgeDetectionType>
    1b72:	0b c0       	rjmp	.+22     	; 0x1b8a <Ultrasonic_edgeProcessing+0x38>
    1b74:	80 91 78 00 	lds	r24, 0x0078
	}
	else if(g_edgeCount == 2)
    1b78:	82 30       	cpi	r24, 0x02	; 2
    1b7a:	39 f4       	brne	.+14     	; 0x1b8a <Ultrasonic_edgeProcessing+0x38>
    1b7c:	9c db       	rcall	.-2248   	; 0x12b6 <Icu_getInputCaptureValue>
    1b7e:	90 93 7a 00 	sts	0x007A, r25
	{
		/* Store the High time value */
		g_timeHigh = Icu_getInputCaptureValue();
    1b82:	80 93 79 00 	sts	0x0079, r24
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	77 db       	rcall	.-2322   	; 0x1278 <Icu_setEdgeDetectionType>
    1b8a:	cf 91       	pop	r28
		/* Detect rising edge */
		Icu_setEdgeDetectionType(RISING);
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <Ultrasonic_Trigger>:
/*
 * Description :
 * Function send trigger pulse for Ultrasonic sensor to start measurements
 */
static void Ultrasonic_Trigger(void)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	68 97       	sbiw	r28, 0x18	; 24
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
	/* Send the Trigger pulse */
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID,ULTRASONIC_TRIGGER_PIN_ID,LOGIC_HIGH);
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	65 e0       	ldi	r22, 0x05	; 5
    1ba8:	41 e0       	ldi	r20, 0x01	; 1
    1baa:	65 d9       	rcall	.-3382   	; 0xe76 <GPIO_writePin>
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	a0 e2       	ldi	r26, 0x20	; 32
    1bb2:	b1 e4       	ldi	r27, 0x41	; 65
    1bb4:	8d 8b       	std	Y+21, r24	; 0x15
    1bb6:	9e 8b       	std	Y+22, r25	; 0x16
    1bb8:	af 8b       	std	Y+23, r26	; 0x17
    1bba:	b8 8f       	std	Y+24, r27	; 0x18
    1bbc:	6d 89       	ldd	r22, Y+21	; 0x15
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc4:	2b ea       	ldi	r18, 0xAB	; 171
    1bc6:	3a ea       	ldi	r19, 0xAA	; 170
    1bc8:	4a e2       	ldi	r20, 0x2A	; 42
    1bca:	50 e4       	ldi	r21, 0x40	; 64
    1bcc:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	89 8b       	std	Y+17, r24	; 0x11
    1bd6:	9a 8b       	std	Y+18, r25	; 0x12
    1bd8:	ab 8b       	std	Y+19, r26	; 0x13
    1bda:	bc 8b       	std	Y+20, r27	; 0x14
    1bdc:	69 89       	ldd	r22, Y+17	; 0x11
	if (__tmp < 1.0)
    1bde:	7a 89       	ldd	r23, Y+18	; 0x12
    1be0:	8b 89       	ldd	r24, Y+19	; 0x13
    1be2:	9c 89       	ldd	r25, Y+20	; 0x14
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e8       	ldi	r20, 0x80	; 128
    1bea:	5f e3       	ldi	r21, 0x3F	; 63
    1bec:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    1bf0:	88 23       	and	r24, r24
    1bf2:	1c f4       	brge	.+6      	; 0x1bfa <Ultrasonic_Trigger+0x6a>
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    1bf6:	88 8b       	std	Y+16, r24	; 0x10
    1bf8:	91 c0       	rjmp	.+290    	; 0x1d1c <Ultrasonic_Trigger+0x18c>
    1bfa:	69 89       	ldd	r22, Y+17	; 0x11
	else if (__tmp > 255)
    1bfc:	7a 89       	ldd	r23, Y+18	; 0x12
    1bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    1c00:	9c 89       	ldd	r25, Y+20	; 0x14
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	4f e7       	ldi	r20, 0x7F	; 127
    1c08:	53 e4       	ldi	r21, 0x43	; 67
    1c0a:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	0c f0       	brlt	.+2      	; 0x1c14 <Ultrasonic_Trigger+0x84>
    1c12:	7b c0       	rjmp	.+246    	; 0x1d0a <Ultrasonic_Trigger+0x17a>
    1c14:	6d 89       	ldd	r22, Y+21	; 0x15
	{
		_delay_ms(__us / 1000.0);
    1c16:	7e 89       	ldd	r23, Y+22	; 0x16
    1c18:	8f 89       	ldd	r24, Y+23	; 0x17
    1c1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	4a e7       	ldi	r20, 0x7A	; 122
    1c22:	54 e4       	ldi	r21, 0x44	; 68
    1c24:	0e 94 08 03 	call	0x610	; 0x610 <__divsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	8c 87       	std	Y+12, r24	; 0x0c
    1c2e:	9d 87       	std	Y+13, r25	; 0x0d
    1c30:	ae 87       	std	Y+14, r26	; 0x0e
    1c32:	bf 87       	std	Y+15, r27	; 0x0f
    1c34:	6c 85       	ldd	r22, Y+12	; 0x0c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c36:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c38:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	4a ef       	ldi	r20, 0xFA	; 250
    1c42:	54 e4       	ldi	r21, 0x44	; 68
    1c44:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	88 87       	std	Y+8, r24	; 0x08
    1c4e:	99 87       	std	Y+9, r25	; 0x09
    1c50:	aa 87       	std	Y+10, r26	; 0x0a
    1c52:	bb 87       	std	Y+11, r27	; 0x0b
    1c54:	68 85       	ldd	r22, Y+8	; 0x08
	if (__tmp < 1.0)
    1c56:	79 85       	ldd	r23, Y+9	; 0x09
    1c58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e8       	ldi	r20, 0x80	; 128
    1c62:	5f e3       	ldi	r21, 0x3F	; 63
    1c64:	0e 94 0b 04 	call	0x816	; 0x816 <__ltsf2>
    1c68:	88 23       	and	r24, r24
    1c6a:	2c f4       	brge	.+10     	; 0x1c76 <Ultrasonic_Trigger+0xe6>
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	9f 83       	std	Y+7, r25	; 0x07
    1c72:	8e 83       	std	Y+6, r24	; 0x06
    1c74:	3f c0       	rjmp	.+126    	; 0x1cf4 <Ultrasonic_Trigger+0x164>
    1c76:	68 85       	ldd	r22, Y+8	; 0x08
	else if (__tmp > 65535)
    1c78:	79 85       	ldd	r23, Y+9	; 0x09
    1c7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	3f ef       	ldi	r19, 0xFF	; 255
    1c82:	4f e7       	ldi	r20, 0x7F	; 127
    1c84:	57 e4       	ldi	r21, 0x47	; 71
    1c86:	0e 94 b1 03 	call	0x762	; 0x762 <__gtsf2>
    1c8a:	18 16       	cp	r1, r24
    1c8c:	4c f5       	brge	.+82     	; 0x1ce0 <Ultrasonic_Trigger+0x150>
    1c8e:	6c 85       	ldd	r22, Y+12	; 0x0c
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c90:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c92:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c94:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e2       	ldi	r20, 0x20	; 32
    1c9c:	51 e4       	ldi	r21, 0x41	; 65
    1c9e:	0e 94 11 02 	call	0x422	; 0x422 <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	cd 01       	movw	r24, r26
    1caa:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	9f 83       	std	Y+7, r25	; 0x07
    1cb4:	8e 83       	std	Y+6, r24	; 0x06
    1cb6:	0f c0       	rjmp	.+30     	; 0x1cd6 <Ultrasonic_Trigger+0x146>
    1cb8:	88 ec       	ldi	r24, 0xC8	; 200
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	9d 83       	std	Y+5, r25	; 0x05
    1cbe:	8c 83       	std	Y+4, r24	; 0x04
    1cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <Ultrasonic_Trigger+0x134>
    1cc8:	9d 83       	std	Y+5, r25	; 0x05
    1cca:	8c 83       	std	Y+4, r24	; 0x04
    1ccc:	8e 81       	ldd	r24, Y+6	; 0x06
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cce:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	9f 83       	std	Y+7, r25	; 0x07
    1cd4:	8e 83       	std	Y+6, r24	; 0x06
    1cd6:	8e 81       	ldd	r24, Y+6	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	69 f7       	brne	.-38     	; 0x1cb8 <Ultrasonic_Trigger+0x128>
    1cde:	24 c0       	rjmp	.+72     	; 0x1d28 <Ultrasonic_Trigger+0x198>
    1ce0:	68 85       	ldd	r22, Y+8	; 0x08
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce2:	79 85       	ldd	r23, Y+9	; 0x09
    1ce4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ce6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ce8:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	9f 83       	std	Y+7, r25	; 0x07
    1cf2:	8e 83       	std	Y+6, r24	; 0x06
    1cf4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf6:	9f 81       	ldd	r25, Y+7	; 0x07
    1cf8:	9b 83       	std	Y+3, r25	; 0x03
    1cfa:	8a 83       	std	Y+2, r24	; 0x02
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <Ultrasonic_Trigger+0x170>
    1d04:	9b 83       	std	Y+3, r25	; 0x03
    1d06:	8a 83       	std	Y+2, r24	; 0x02
    1d08:	0f c0       	rjmp	.+30     	; 0x1d28 <Ultrasonic_Trigger+0x198>
    1d0a:	69 89       	ldd	r22, Y+17	; 0x11
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d0c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d10:	9c 89       	ldd	r25, Y+20	; 0x14
    1d12:	0e 94 47 00 	call	0x8e	; 0x8e <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	88 8b       	std	Y+16, r24	; 0x10
    1d1c:	88 89       	ldd	r24, Y+16	; 0x10
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d22:	8a 95       	dec	r24
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <Ultrasonic_Trigger+0x192>
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	81 e0       	ldi	r24, 0x01	; 1
	_delay_us(10);
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT_ID,ULTRASONIC_TRIGGER_PIN_ID,LOGIC_LOW);
    1d2a:	65 e0       	ldi	r22, 0x05	; 5
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	a3 d8       	rcall	.-3770   	; 0xe76 <GPIO_writePin>
    1d30:	68 96       	adiw	r28, 0x18	; 24
    1d32:	0f b6       	in	r0, 0x3f	; 63
}
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <Ultrasonic_init>:
 * Initialize the Ultrasonic driver by:
 * 1. Initialize the Trigger pin direction
 * 2. Initialize the ICU driver and Its Call back function.
 */
void Ultrasonic_init(void)
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <Ultrasonic_init+0x6>
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
	/* Create configuration structure for ICU driver */
	Icu_ConfigType Icu_Config = {F_CPU_8,RISING};
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	8a 83       	std	Y+2, r24	; 0x02

	/* Configure the Trigger pin as output */
	GPIO_setupPinDirection(ULTRASONIC_TRIGGER_PORT_ID,ULTRASONIC_TRIGGER_PIN_ID,PIN_OUTPUT);
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	65 e0       	ldi	r22, 0x05	; 5
    1d58:	41 e0       	ldi	r20, 0x01	; 1
    1d5a:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_setupPinDirection>

	/* Initialize the ICU Driver */
	Icu_init(&Icu_Config);
    1d5e:	ce 01       	movw	r24, r28
    1d60:	01 96       	adiw	r24, 0x01	; 1
    1d62:	2f da       	rcall	.-2978   	; 0x11c2 <Icu_init>
    1d64:	89 ea       	ldi	r24, 0xA9	; 169

	/* Set the Call back function pointer in the ICU driver */
	Icu_setCallBack(Ultrasonic_edgeProcessing);
    1d66:	9d e0       	ldi	r25, 0x0D	; 13
    1d68:	75 da       	rcall	.-2838   	; 0x1254 <Icu_setCallBack>
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
}
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <Ultrasonic_readDistance>:
 * 3. Send the Trigger to the Ultrasonic by call Ultrasonic_Trigger function
 * 4. Wait for the measurements to be done by the ICU. We need two edges raising and falling.
 * 5. Calculate the distance in Centimeter value.
 */
uint16 Ultrasonic_readDistance(void)
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
	/* Clear all variables as they may have values from previous read operation */
	g_distance = 0;
    1d7c:	10 92 7b 00 	sts	0x007B, r1
	g_edgeCount = 0;
    1d80:	10 92 78 00 	sts	0x0078, r1
	g_timeHigh = 0;
    1d84:	10 92 7a 00 	sts	0x007A, r1
    1d88:	10 92 79 00 	sts	0x0079, r1

	/* Clear the timer counter register to start measurements once trigger is sent */
	Icu_clearTimerValue();
    1d8c:	9f da       	rcall	.-2754   	; 0x12cc <Icu_clearTimerValue>
    1d8e:	00 df       	rcall	.-512    	; 0x1b90 <Ultrasonic_Trigger>

	/* Send the trigger to activate the Ultra-sonic sensor (Start measurements) */
	Ultrasonic_Trigger();
    1d90:	80 91 78 00 	lds	r24, 0x0078

	/* Wait until the ICU measures the pulse in the ECHO pin */
	while(g_edgeCount != ULTRASONIC_NUM_OF_DETECTED_EDGES);
    1d94:	82 30       	cpi	r24, 0x02	; 2
    1d96:	e1 f7       	brne	.-8      	; 0x1d90 <Ultrasonic_readDistance+0x1c>
    1d98:	80 91 79 00 	lds	r24, 0x0079

	/* Calculate the distance in Centimeter value */
	g_distance = g_timeHigh / 58;
    1d9c:	90 91 7a 00 	lds	r25, 0x007A
    1da0:	2a e3       	ldi	r18, 0x3A	; 58
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	b9 01       	movw	r22, r18
    1da6:	0a d0       	rcall	.+20     	; 0x1dbc <__udivmodhi4>
    1da8:	cb 01       	movw	r24, r22
    1daa:	80 93 7b 00 	sts	0x007B, r24
    1dae:	80 91 7b 00 	lds	r24, 0x007B
    1db2:	88 2f       	mov	r24, r24

	return g_distance;
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <__udivmodhi4>:
}
    1dbc:	aa 1b       	sub	r26, r26
    1dbe:	bb 1b       	sub	r27, r27
    1dc0:	51 e1       	ldi	r21, 0x11	; 17
    1dc2:	07 c0       	rjmp	.+14     	; 0x1dd2 <__udivmodhi4_ep>

00001dc4 <__udivmodhi4_loop>:
    1dc4:	aa 1f       	adc	r26, r26
    1dc6:	bb 1f       	adc	r27, r27
    1dc8:	a6 17       	cp	r26, r22
    1dca:	b7 07       	cpc	r27, r23
    1dcc:	10 f0       	brcs	.+4      	; 0x1dd2 <__udivmodhi4_ep>
    1dce:	a6 1b       	sub	r26, r22
    1dd0:	b7 0b       	sbc	r27, r23

00001dd2 <__udivmodhi4_ep>:
    1dd2:	88 1f       	adc	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	5a 95       	dec	r21
    1dd8:	a9 f7       	brne	.-22     	; 0x1dc4 <__udivmodhi4_loop>
    1dda:	80 95       	com	r24
    1ddc:	90 95       	com	r25
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	08 95       	ret

00001de4 <__prologue_saves__>:
    1de4:	2f 92       	push	r2
    1de6:	3f 92       	push	r3
    1de8:	4f 92       	push	r4
    1dea:	5f 92       	push	r5
    1dec:	6f 92       	push	r6
    1dee:	7f 92       	push	r7
    1df0:	8f 92       	push	r8
    1df2:	9f 92       	push	r9
    1df4:	af 92       	push	r10
    1df6:	bf 92       	push	r11
    1df8:	cf 92       	push	r12
    1dfa:	df 92       	push	r13
    1dfc:	ef 92       	push	r14
    1dfe:	ff 92       	push	r15
    1e00:	0f 93       	push	r16
    1e02:	1f 93       	push	r17
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	ca 1b       	sub	r28, r26
    1e0e:	db 0b       	sbc	r29, r27
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	09 94       	ijmp

00001e1c <__epilogue_restores__>:
    1e1c:	2a 88       	ldd	r2, Y+18	; 0x12
    1e1e:	39 88       	ldd	r3, Y+17	; 0x11
    1e20:	48 88       	ldd	r4, Y+16	; 0x10
    1e22:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e24:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e26:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e28:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e2e:	b9 84       	ldd	r11, Y+9	; 0x09
    1e30:	c8 84       	ldd	r12, Y+8	; 0x08
    1e32:	df 80       	ldd	r13, Y+7	; 0x07
    1e34:	ee 80       	ldd	r14, Y+6	; 0x06
    1e36:	fd 80       	ldd	r15, Y+5	; 0x05
    1e38:	0c 81       	ldd	r16, Y+4	; 0x04
    1e3a:	1b 81       	ldd	r17, Y+3	; 0x03
    1e3c:	aa 81       	ldd	r26, Y+2	; 0x02
    1e3e:	b9 81       	ldd	r27, Y+1	; 0x01
    1e40:	ce 0f       	add	r28, r30
    1e42:	d1 1d       	adc	r29, r1
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	ed 01       	movw	r28, r26
    1e50:	08 95       	ret

00001e52 <itoa>:
    1e52:	fb 01       	movw	r30, r22
    1e54:	9f 01       	movw	r18, r30
    1e56:	e8 94       	clt
    1e58:	42 30       	cpi	r20, 0x02	; 2
    1e5a:	bc f0       	brlt	.+46     	; 0x1e8a <itoa+0x38>
    1e5c:	45 32       	cpi	r20, 0x25	; 37
    1e5e:	ac f4       	brge	.+42     	; 0x1e8a <itoa+0x38>
    1e60:	4a 30       	cpi	r20, 0x0A	; 10
    1e62:	29 f4       	brne	.+10     	; 0x1e6e <itoa+0x1c>
    1e64:	97 fb       	bst	r25, 7
    1e66:	1e f4       	brtc	.+6      	; 0x1e6e <itoa+0x1c>
    1e68:	90 95       	com	r25
    1e6a:	81 95       	neg	r24
    1e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6e:	64 2f       	mov	r22, r20
    1e70:	77 27       	eor	r23, r23
    1e72:	a4 df       	rcall	.-184    	; 0x1dbc <__udivmodhi4>
    1e74:	80 5d       	subi	r24, 0xD0	; 208
    1e76:	8a 33       	cpi	r24, 0x3A	; 58
    1e78:	0c f0       	brlt	.+2      	; 0x1e7c <itoa+0x2a>
    1e7a:	89 5d       	subi	r24, 0xD9	; 217
    1e7c:	81 93       	st	Z+, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	a9 f7       	brne	.-22     	; 0x1e6e <itoa+0x1c>
    1e84:	16 f4       	brtc	.+4      	; 0x1e8a <itoa+0x38>
    1e86:	5d e2       	ldi	r21, 0x2D	; 45
    1e88:	51 93       	st	Z+, r21
    1e8a:	10 82       	st	Z, r1
    1e8c:	c9 01       	movw	r24, r18
    1e8e:	00 c0       	rjmp	.+0      	; 0x1e90 <strrev>

00001e90 <strrev>:
    1e90:	dc 01       	movw	r26, r24
    1e92:	fc 01       	movw	r30, r24
    1e94:	67 2f       	mov	r22, r23
    1e96:	71 91       	ld	r23, Z+
    1e98:	77 23       	and	r23, r23
    1e9a:	e1 f7       	brne	.-8      	; 0x1e94 <strrev+0x4>
    1e9c:	32 97       	sbiw	r30, 0x02	; 2
    1e9e:	04 c0       	rjmp	.+8      	; 0x1ea8 <strrev+0x18>
    1ea0:	7c 91       	ld	r23, X
    1ea2:	6d 93       	st	X+, r22
    1ea4:	70 83       	st	Z, r23
    1ea6:	62 91       	ld	r22, -Z
    1ea8:	ae 17       	cp	r26, r30
    1eaa:	bf 07       	cpc	r27, r31
    1eac:	c8 f3       	brcs	.-14     	; 0x1ea0 <strrev+0x10>
    1eae:	08 95       	ret

00001eb0 <_exit>:
    1eb0:	f8 94       	cli

00001eb2 <__stop_program>:
    1eb2:	ff cf       	rjmp	.-2      	; 0x1eb2 <__stop_program>
